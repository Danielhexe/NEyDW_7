/* Minification failed. Returning unminified contents.
(656,39-40): run-time error JS1195: Expected expression: .
(656,50-51): run-time error JS1003: Expected ':': )
(658,34-42): run-time error JS1010: Expected identifier: function
(658,43-44): run-time error JS1193: Expected ',' or ')': (
(658,43-44): run-time error JS1006: Expected ')': (
(658,43-44): run-time error JS1008: Expected '{': (
(658,44-45): run-time error JS1195: Expected expression: )
(660,26-27): run-time error JS1195: Expected expression: )
(662,21-25): run-time error JS1009: Expected '}': else
(662,21-25): run-time error JS1006: Expected ')': else
(662,21-25): run-time error JS1034: Unmatched 'else'; no 'if' defined: else
(2594,41-42): run-time error JS1195: Expected expression: .
(2594,50-51): run-time error JS1003: Expected ':': ,
(2595,24-25): run-time error JS1009: Expected '}': :
(2589,30): run-time error JS1004: Expected ';'
(2595,24-25): run-time error JS1195: Expected expression: :
(2596,24): run-time error JS1004: Expected ';'
(2596,24-25): run-time error JS1195: Expected expression: :
(2600,13-20): run-time error JS1033: Expected 'catch': angular
(2606,10): run-time error JS1004: Expected ';'
(2606,11-16): run-time error JS1195: Expected expression: catch
(2606,20): run-time error JS1004: Expected ';'
(2616,5-9): run-time error JS1006: Expected ')': this
(2626,41-42): run-time error JS1195: Expected expression: .
(2626,50-51): run-time error JS1003: Expected ':': ,
(2627,24-25): run-time error JS1009: Expected '}': :
(2621,30): run-time error JS1004: Expected ';'
(2627,24-25): run-time error JS1195: Expected expression: :
(2628,24): run-time error JS1004: Expected ';'
(2628,24-25): run-time error JS1195: Expected expression: :
(2629,14-15): run-time error JS1033: Expected 'catch': ;
(2633,10): run-time error JS1004: Expected ';'
(2633,11-16): run-time error JS1195: Expected expression: catch
(2633,20): run-time error JS1004: Expected ';'
(2636,5-6): run-time error JS1002: Syntax error: }
(2655,41-42): run-time error JS1195: Expected expression: .
(2655,50-51): run-time error JS1003: Expected ':': ,
(2656,24-25): run-time error JS1009: Expected '}': :
(2647,30): run-time error JS1004: Expected ';'
(2656,24-25): run-time error JS1195: Expected expression: :
(2657,24): run-time error JS1004: Expected ';'
(2657,24-25): run-time error JS1195: Expected expression: :
(2661,13-20): run-time error JS1033: Expected 'catch': angular
(2667,10): run-time error JS1004: Expected ';'
(2667,11-16): run-time error JS1195: Expected expression: catch
(2667,20): run-time error JS1004: Expected ';'
(2670,5-6): run-time error JS1002: Syntax error: }
(2915,45-46): run-time error JS1195: Expected expression: .
(2915,54-55): run-time error JS1003: Expected ':': ,
(2916,26-27): run-time error JS1009: Expected '}': :
(2916,26-27): run-time error JS1009: Expected '}': :
(2916,26-27): run-time error JS1006: Expected ')': :
(2908,36): run-time error JS1004: Expected ';'
(2916,43-44): run-time error JS1195: Expected expression: .
(2916,52-53): run-time error JS1003: Expected ':': ,
(2917,31): run-time error JS1004: Expected ';'
(2917,31-32): run-time error JS1195: Expected expression: :
(2917,48-49): run-time error JS1195: Expected expression: .
(2917,57-58): run-time error JS1003: Expected ':': ,
(2918,30): run-time error JS1004: Expected ';'
(2918,30-31): run-time error JS1195: Expected expression: :
(2919,32): run-time error JS1004: Expected ';'
(2919,32-33): run-time error JS1195: Expected expression: :
(2920,34): run-time error JS1004: Expected ';'
(2920,34-35): run-time error JS1195: Expected expression: :
(2921,29): run-time error JS1004: Expected ';'
(2921,29-30): run-time error JS1195: Expected expression: :
(2922,26): run-time error JS1004: Expected ';'
(2922,26-27): run-time error JS1195: Expected expression: :
(2923,27): run-time error JS1004: Expected ';'
(2923,27-28): run-time error JS1195: Expected expression: :
(2924,28): run-time error JS1004: Expected ';'
(2924,28-29): run-time error JS1195: Expected expression: :
(2925,33): run-time error JS1004: Expected ';'
(2925,33-34): run-time error JS1195: Expected expression: :
(2927,13-14): run-time error JS1033: Expected 'catch': }
(2927,14): run-time error JS1004: Expected ';'
(2927,14-15): run-time error JS1195: Expected expression: )
(2929,9-10): run-time error JS1002: Syntax error: }
(2929,11-16): run-time error JS1195: Expected expression: catch
(2929,20): run-time error JS1004: Expected ';'
(2932,5-6): run-time error JS1002: Syntax error: }
(2965,43-44): run-time error JS1195: Expected expression: .
(2965,52-53): run-time error JS1003: Expected ':': ,
(2966,27-28): run-time error JS1009: Expected '}': :
(2954,30): run-time error JS1004: Expected ';'
(2966,27-28): run-time error JS1195: Expected expression: :
(2967,24): run-time error JS1004: Expected ';'
(2967,24-25): run-time error JS1195: Expected expression: :
(2968,29): run-time error JS1004: Expected ';'
(2968,29-30): run-time error JS1195: Expected expression: :
(2969,24): run-time error JS1004: Expected ';'
(2969,24-25): run-time error JS1195: Expected expression: :
(2973,13-20): run-time error JS1033: Expected 'catch': angular
(2979,10): run-time error JS1004: Expected ';'
(2979,11-16): run-time error JS1195: Expected expression: catch
(2979,20): run-time error JS1004: Expected ';'
(2982,5-6): run-time error JS1002: Syntax error: }
(3101,1-2): run-time error JS1002: Syntax error: }
(3101,2-3): run-time error JS1195: Expected expression: )
(3278,15-16): run-time error JS1005: Expected '(': {
(3279,13-19): run-time error JS1009: Expected '}': $state
(3279,13-19): run-time error JS1006: Expected ')': $state
(3279,13-19): run-time error JS1008: Expected '{': $state
(3279,19-20): run-time error JS1195: Expected expression: .
(3375,15-16): run-time error JS1005: Expected '(': {
(3376,13-19): run-time error JS1009: Expected '}': $state
(3376,13-19): run-time error JS1006: Expected ')': $state
(3376,13-19): run-time error JS1008: Expected '{': $state
(3376,19-20): run-time error JS1195: Expected expression: .
(658,25,661,22): run-time error JS1314: Implicit property name must be identifier: $timeout(function () {
                            $rootScope.complementa_comida = true;
                        });
                    }
(1957,13-18): run-time error JS1292: Strict-mode does not allow duplicate property names: scope
 */
//angular.module('modalModule', [])
    //.factory('$modal', function ($document, $rootScope, $compile, $q) {
    //    var SNAKE_CASE_REGEXP = /[A-Z]/g;

    //    function snake_case(name) {
    //        var separator = '-';
    //        return name.replace(SNAKE_CASE_REGEXP, function (letter, pos) {
    //            console.log('koko' + letter.toLowerCase())
    //            return (pos ? separator : '') + letter.toLowerCase();
    //        });
    //    }
    //    function open(options) {
    //        this.promise = $q.defer();
    //        this.modalWindowElScope = $rootScope.$new();

    //        var toTransclude = '';
    //        if (options.template) {
    //            toTransclude = options.template;
    //        } else if (options.component) {

    //            this.modalWindowElScope.close = function (val) {
    //                this.close(val)
    //            }.bind(this)

    //            if (options.resolve) { this.modalWindowElScope.resolve = options.resolve; }
    //            console.log('uuu', snake_case(options.component))
    //            toTransclude = `<${snake_case(options.component)} resolve="resolve" close="close(val)"></${snake_case(options.component)}>`;
    //        }
    //        var str = `<div class="modal-window" my-modal-window>${toTransclude}</div>`;
    //        this.modalWindowEl = $compile(str)(this.modalWindowElScope);

    //        this.backdropElScope = $rootScope.$new();
    //        this.backdropEl = $compile('<div class="backdrop" my-modal-backdrop></div>')(this.backdropElScope);

    //        angular.element($document[0].body)
    //            .append(this.modalWindowEl)
    //            .append(this.backdropEl)

    //        return this.promise.promise;
    //    }
    //    function close(val) {
    //        this.backdropEl.remove();
    //        this.backdropElScope.$destroy();
    //        this.modalWindowEl.remove();
    //        this.modalWindowElScope.$destroy();
    //        this.promise.resolve(val);
    //    }
    //    return {
    //        open: open,
    //        close: close
    //    }
    //})
    //.directive('myModalBackdrop', function ($modal) {
    //    return {
    //    }
    //})
    //.directive('myModalWindow', function ($modal) {
    //    return {
    //        template: '<div class="modal" ng-transclude></div>',
    //        transclude: true,
    //        link: function (scope, element, attrs) {
    //            element.on('click', function (evt) {
    //                if (evt.target === evt.currentTarget) {
    //                    $modal.close()
    //                }
    //            })
    //        }
    //    }
    //});
'use strict'
angular.module('modalModule', [])
    .factory('$modal', function ($document, $rootScope, $compile, $q) {
        var SNAKE_CASE_REGEXP = /[A-Z]/g;

        function snake_case(name) {
            var separator = '-';
            return name.replace(SNAKE_CASE_REGEXP, function (letter, pos) {
                return (pos ? separator : '') + letter.toLowerCase();
            });
        }
        function open(options) {
            this.promise = $q.defer();
            this.modalWindowElScope = $rootScope.$new();

            var toTransclude = '';
            if (options.template) {
                toTransclude = options.template;
            } else if (options.component) {

                this.modalWindowElScope.close = function (val) {
                    this.close(val)
                }.bind(this)

                if (options.resolve) { this.modalWindowElScope.resolve = options.resolve; }
                console.log('uuu', snake_case(options.component))
                toTransclude = `<${snake_case(options.component)} resolve="resolve" close="close(val)"></${snake_case(options.component)}>`;
            }
            var str = `<div class="mod" my-modal-window>${toTransclude}</div>`;
            this.modalWindowEl = $compile(str)(this.modalWindowElScope);

            //this.backdropElScope = $rootScope.$new();
            //this.backdropEl = $compile('<div class="backdrop" my-modal-backdrop></div>')(this.backdropElScope);

            angular.element($document[0].body)
                .append(this.modalWindowEl)
            //.append(this.backdropEl)

            return this.promise.promise;
        }
        function close(val) {
            this.modalWindowEl.remove();
            this.modalWindowElScope.$destroy();
            this.promise.resolve(val);
        }
        return {
            open: open,
            close: close
        }
    })
    .directive('myModalBackdrop', function ($modal) {
        return {
        }
    })
    .directive('myModalWindow', function ($modal) {
        return {
            template: '<div class="mod-content mod-txt" ng-transclude></div>',
            transclude: true,
            link: function (scope, element, attrs) {
                element.on('click', function (evt) {
                    if (evt.target === evt.currentTarget) {
                        $modal.close()
                    }
                })
            }
        }
    })

var app = angular.module('shakeshack', ['ngGuid', 'ngAnimate', 'ngResource', 'toaster', 'ui.router', 'satellizer', 'ui.mask', 'fayzaan.gRecaptcha.v3', 'modalModule'])
;
angular.module('shakeshack')
    .constant('entorno', {
        //recaptcha: '6LfKzdQZAAAAAGaN6JPmFkyFXjVsOu_HkD9MaM5H',
        recaptcha: '6LeLV9IZAAAAAKPhTf6dzM3Rl0WCRE7IgCU3Wh9z',
        google: '630648596780-s22hghf72nlin7cp7cmjk2t1qtkph02t.apps.googleusercontent.com',
        facebook: '736553706921078',
        paypal_client_id: 'AZZT9Wz_6fCb7P5WQZWW4ParLmtdNok6zJkLaQCzg6RUK6KDK2_fooCfHm2Be6azzCbRUbTV_pHRkvks',
        stripe: 'pk_live_51HNjRWAaQV48pbPHQIoUijs1TrI8MYlIeqW9t6AtEzXSr8ICnMEZifv8fiQrWJ4AXz8kHsNmmrbSOLTWXxIK4Gfh000LhP2UE6',
        llave_publica: 'B823FAB86225C27184041F03F6617ACB2222F1D261E2ADBCF0B1D195AADDBD84',
        fraudNet: 'SSK_QTZKCH7PNZB7W_PYMNT'
    });
app.constant('mensajes', {
    mensaje_stripe_invalido: "Intenta con una forma de pago distinta",
    mensaje_selecciona_hora: "Selecciona la hora de entrega",
    mensaje_selecciona_forma_pago: "Selecciona una forma de pago", 
    checkout_mensaje_paypal_button_excepcion: "La forma de pago paypal no es valída", 
    tarjeta_mensaje_no_tarjeta: "El número de tarjeta es requerido", 
    tarjeta_mensaje_titular: "El nombre del titular es requerido", 
    tarjeta_mensaje_fecha_vigencia: "La fecha de expiración es requerida" , 
    tarjeta_mensaje_cvc: "El cvc es requerido" , 
});;
app.constant('scripts', {
    stripe: 'https://js.stripe.com/v3/'
});
app.constant('errores', {
    //########################################################################
    //## Errores formulario registro

    registro001: "Ingresa tú nombre(s)",
    registro002: "Ingresa tú apellido paterno",
    registro003: "Ingresa tú apellido materno",
    registro004: "Ingresa tú fecha de nacimiento",
    registro005: "Ingresa tú teléfono",
    registro006: "Ingresa tú correo electrónico",
    registro007: "Ingresa tu contraseña, debe de contener al menos 6 caracteres alfanuméricos. Debe contener mínimo un número",
    registro008: "La contraseña debe de coincidir",
    registro009: "Debes de aceptar los términos y condiciones",

    //########################################################################

    //########################################################################
    //## Errores formulario inicio sesión

    inicioSesion001: 'Ingresa tú correo',
    inicioSesion002: 'Ingresa tú contraseña de 6 caracteres mínimos',
    //########################################################################

    //########################################################################
    //## Errores formulario inicio sesión
    invitado001: 'Ingresa tú nombre(s)',
    invitado002: "Ingresa tú apellido paterno",
    invitado003: "Ingresa tú apellido materno",
    invitado004: "Ingresa tú correo electrónico",
    invitado005: "Ingresa tú teléfono",
    invitado006: "Ingresa tú correo",
    //########################################################################


    //########################################################################
    //## Errores formulario de completar información por registro de redes sociales
    completarInformacion001: 'Ingresa tú teléfono',
    completarInformación002: 'Ingresa tú fecha de nacimiento'
    //########################################################################

});;
app.constant('etiquetasFormulario', {
    //########################################################################
    //## Etiquetas formulario de completar información por registro de redes sociales
    completarInfomacionHeaderDiv: 'Tu información',
    completarInfomacionHeaderFormulario: 'Confirma tu número de teléfono y tu fecha de nacimiento:'
    //########################################################################

});;
'use strict'

app.config(function
    (
        entorno,
        $stateProvider,
        $urlRouterProvider,
        $authProvider,
        $httpProvider,
        $provide,
        $locationProvider
    ) {
    $authProvider.loginUrl = "/api/services/oauth/1.0/token";
    $authProvider.signupUrl = "/api/services/usuario/1.0/registrar";
    $authProvider.tokenName = "token";
    $authProvider.tokenPrefix = "shk",
        $authProvider.tokenType = 'Bearer';
    $authProvider.storageType = 'localStorage';
    $authProvider.facebook({
        clientId: entorno.facebook,
        url: '/api/services/auth/1.0/facebook',
    });

    $authProvider.google({
        clientId: entorno.google,
        url: '/api/services/auth/1.0/google',
    });

    //$locationProvider.html5Mode(true);
    //$locationProvider.hashPrefix('');


    $urlRouterProvider.otherwise("/");

    var skipIfLoggedIn = ['$q', '$auth', function ($q, $auth) {
        var deferred = $q.defer();
        if ($auth.isAuthenticated()) {
            deferred.reject();
        } else {
            deferred.resolve();
        }
        return deferred.promise;
    }];

    var loginRequired = ['$q', '$location', '$auth', function ($q, $location, $auth) {
        var deferred = $q.defer();
        if ($auth.isAuthenticated()) {
            deferred.resolve();
        } else {
            $location.path('/login');
        }
        return deferred.promise;
    }];

    var orderRequired = ['$q', '$location', '$auth', function ($q, $location, $auth) {
        var deferred = $q.defer();
        if (localStorage.getItem('pedido') != null) {
            deferred.resolve();
        } else {
            $location.path('/inicio');
        }
        return deferred.promise;
    }];


    $stateProvider
        .state('inicio', {
            url: '/',
            views: {
                'principal@': {
                    controller: 'TiendaCtrl',
                    templateUrl: '/principal/inicio'
                },
                'header@': {
                    templateUrl: '/principal/header'

                }
            }
        }).state('inicio.inicio_route', {
            url: '/inicio',
            views: {
                'principal@': {
                    controller: 'TiendaCtrl',
                    templateUrl: '/principal/inicio'
                },
                'header@': {
                    templateUrl: '/principal/header'

                }
            }
        })
        .state('inicio.tiendas', {
            views: {
                'svw-tiendas': {
                    templateUrl: '/tienda/todas',
                }
            }
        })
        .state('inicio.buscar-tiendas', {
            views: {
                'svw-buscar': {
                    templateUrl: '/tienda/buscar',

                }
            }
        })
        .state('inicio.menu', {
            url: 'menu/:id',
            views: {
                'principal@': {
                    controller: 'MenuCtrl',
                    templateUrl: '/tienda/menu'
                }
            }
        })
        .state('inicio.checkout', {
            url: 'checkout',
            views: {
                'principal@': {
                    controller: 'CheckoutCtrl',
                    templateUrl: 'pedido/checkoutsimple'
                }
            },
            resolve: orderRequired

        })
        .state('inicio.exitoso', {
            url: 'exitoso/:id',
            views: {
                'principal@': {
                    templateUrl: 'pedido/exitoso',
                    controller: 'OrdenCtrl',
                }
            },
            params: {
                pedido: ''
            }
        })
        .state('inicio.menu.modal', {
            views: {
                'svw-modal': {
                    templateUrl: '/tienda/modal',
                }
            }
        })
        .state('inicio.modal-actualizar', {
            views: {

                'svw-modal-actualizar@': {
                    templateUrl: '/tienda/modalactualizar'
                }
            }
        })
        .state('inicio.login', {
            url: 'login',
            views: {
                'principal@': {
                    controller: 'LoginCtrl',
                    templateUrl: '/auth/login'
                }
            }
        })
        .state('inicio.registro', {
            url: 'registro',
            views: {
                'principal@': {
                    controller: 'UsuarioCtrl',
                    templateUrl: '/usuario/registro'
                }
            }
        })
        .state('inicio.faqs', {
            url: 'faqs',
            views: {
                'principal@': {
                    templateUrl: '/principal/faqs'
                }
            }
        })
        .state('inicio.terminos', {
            url: 'terminos',
            views: {
                'principal@': {
                    templateUrl: '/principal/terminos'
                }
            }
        })
        .state('inicio.account-verification', {
            url: 'account-verification/:token',
            views: {
                'principal@': {
                    templateUrl: function (params) { return '/verification/account/' + params.token; }
                }
            }
        })
        .state('inicio.recuperar', {
            url: 'recuperar',
            views: {
                'principal@': {
                    controller: 'UsuarioCtrl',
                    templateUrl: '/usuario/recuperar'
                }
            }

        })
        .state('inicio.cuenta', {
            url: 'cuenta',
            views: {
                'principal@': {
                    controller: 'MeCtrl',
                    templateUrl: '/cuenta/informacion'
                }
            },
            resolve: loginRequired
        })
    $provide.factory('RequestHeadersInterceptor', function ($rootScope, $q, $injector) {
        return {
            // optional method
            'request': function (config) {


                if (localStorage.getItem('info_token') != null && localStorage.getItem('info_token') != "null") {

                    var info_token = JSON.parse(localStorage.getItem('info_token'));
                    var expire_time = moment(info_token['.expires']);
                    var minutos_diferencia = expire_time.diff(moment(), 'minutes');
                    if (minutos_diferencia <= 0) {
                        localStorage.removeItem('info_token');
                        localStorage.removeItem('shk_token');
                        $rootScope.es_mayor = false;
                    }
                }
                if (config.url.indexOf("/api") !== -1 && config.url.indexOf("/api/services/oauth/1.0/token") !== 0) {
                    config.headers['llave-publica'] = entorno.llave_publica;
                    config.headers['x-pedido'] = localStorage.getItem('idPedido');

                    if (localStorage.getItem('shk_token') != null)
                        config.headers['Authorization'] = 'Bearer ' + localStorage.getItem('shk_token');
                }

                return config;
            },

            'response': function (config) {
                return config;
            },
            'responseError': function (response) {
                if (response.status === 401) {
                    if (localStorage.getItem('shk_token') != null)
                        localStorage.removeItem('shk_token');
                    if (localStorage.getItem('info_token') != null)
                        localStorage.removeItem('info_token');
                    if (localStorage.getItem('pedido') != null)
                        $rootScope.cambiar_pedido();
                }

                try {
                    console.log(response);
                    if (response.data.error.codigo_error == '002PedidoPagado') {
                        localStorage.removeItem('idPedido');
                    }
                    console.log('error-api');
                    console.log(response.data.error.codigo_error == '002PedidoPagado');
                    console.log(response);
                } catch (e) {

                }


                return $q.reject(response);
            }
        };
    });

    $httpProvider.interceptors.push('RequestHeadersInterceptor');

})
    .factory('Page', function () {
        var title = 'ShakeShack desde 2004';
        return {
            title: function () { return title; },
            setTitle: function (newTitle) { title = newTitle; }
        };
    })
    .directive('shkTienda', ['Me', '$auth', function (Me, $auth) {


        return {

            link: function (scope, element, attr, ctrl) {
                element.bind("click", function () {
                    if (element.attr('star') === "true") {
                        Me.eliminar_tienda(element.attr('id'))
                            .then(function () {
                                attr.$set('star', "false");
                                element.html('<img src="../Assets/star-empty.png" />')
                            })
                            .catch(function () {

                            });
                    }
                    else {

                        Me.agregar_tienda(element.attr('id'))
                            .then(function () {
                                attr.$set('star', "true");
                                element.html('<img src="../Assets/star-filled.png" />')
                            })
                            .catch(function () {

                            });
                    }

                });
            }
        }
    }])
    .directive('onFinishRender', ['$timeout', '$parse', 'Utilerias', function ($timeout, $parse, Utilerias) {
        return {
            restrict: 'A',
            link: function (scope, element, attr) {
                if (scope.$last === true) {
                    $timeout(function () {
                        scope.$emit('ngRepeatFinished');
                        if (!!attr.onFinishRender) {
                            $parse(attr.onFinishRender)(scope);
                            Utilerias.currentDiv('.ssp-wrapper > div');
                        }
                    });

                }
            }
        }
    }])
    .directive("compareTo", function () {
        return {
            require: "ngModel",
            scope: {
                confirmPassword: "=compareTo"
            },
            link: function (scope, element, attributes, modelVal) {

                modelVal.$validators.compareTo = function (val) {
                    return val == scope.confirmPassword;
                };

                scope.$watch("confirmPassword", function () {
                    modelVal.$validate();
                });
            }
        };
    })
    .run(function (
        checkoutProvider,
        Guid,
        $q,
        $rootScope,
        entorno,
        Utilerias,
        $auth,
        $anchorScroll,
        $state,
        Pedido,
        toaster,
        Me,
        $timeout,
        $window,
        $location,
        $googleAnalyticsService
    ) {
        //defaultErrorMessageResolver.setI18nFileRootPath('Scripts');
        //defaultErrorMessageResolver.setCulture('es-ES');

        /**
         * Variables
         * */
        //$window.ga('create', 'GTM-KTP2FDK', 'auto');
        $rootScope.todas = false;
        $rootScope.no_productos = 0;
        $rootScope.pedido = JSON.parse(localStorage.getItem('pedido'));
        $rootScope.estado_anterior = 'inicio';
        $rootScope.checkout_bag = true;
        $rootScope.pedido_activo = null;
        $rootScope.mensaje_pedido_activo = '';
        $rootScope.sugerencias = [];
        $rootScope.complementa_comida = false;
        $rootScope.key_reCaptcha = entorno.recaptcha;

        $rootScope.utilerias = Utilerias;
        /**
         * Funciones validación estatus usuario
         * */

        $rootScope.isAuthenticated = function () {
            return $auth.isAuthenticated();
        }

        $rootScope.es_mayor = function () {
            if (localStorage.getItem('es_mayor') != null) {
                var mayor_edad = localStorage.getItem('es_mayor');
                return mayor_edad === 'true';
            }
            else {
                return false;
            }
        };

        /***
         * Funciones para  la bolsa de pedido
         * **/
        $rootScope.regresar_menu = function (id) {

            ///Evento GA4 - Botón seleccionado
            $googleAnalyticsService.eventoBotonSeleccionadoSinCheckout('regresar-al-menu', 'cart');


            $("#bag").hide();
            $("body").removeClass("sin-scroll");
            $rootScope.checkout_bag = true;
            $state.go('inicio.menu', { id: id });


        };

        $rootScope.cambiar_locacion = function () {
            $("#bag").hide();
            $("body").removeClass("sin-scroll");
            $state.go('inicio');
        }


        $rootScope.showBag = function () {

            ///Evento GA4 - Botón seleccionado
            $googleAnalyticsService.eventoBotonSeleccionadoSinCheckout('ver-carrito', 'menu');

            ///Evento GA4 - Ver carrito
            $googleAnalyticsService.eventoMostrarCarrito($rootScope.pedido);


            if (localStorage.getItem('pedido') != null) {
                Pedido.sugerencias($rootScope.pedido.id).then(function (response) {
                    $rootScope.sugerencias = response.data;
                    if (response.data?.length > 0) {

                        $timeout(function () {
                            $rootScope.complementa_comida = true;
                        });
                    }
                    else
                        $timeout(function () {
                            $rootScope.complementa_comida = false;
                        });
                })

            }
            $("body").addClass("sin-scroll");
            $("#bag").show();
        };

        $rootScope.closeBag = function () {
            $("body").removeClass("sin-scroll");
            $("#bag").hide();
        };

        /**
         * Validaciones y funciones para el pedido
        * */

        function ActualizarVariables() {
            $rootScope.pedido = JSON.parse(localStorage.getItem('pedido'));
            JSON.parse(localStorage.getItem('pedido')).productos_agregados.forEach(function (producto, index) {
                $rootScope.no_productos += producto.totales.cantidad
            })
            //    $rootScope.no_productos = JSON.parse(localStorage.getItem('pedido')).productos_agregados.length;
        }


        if (localStorage.getItem('pedido') != null) {
            JSON.parse(localStorage.getItem('pedido')).productos_agregados.forEach(function (producto, index) {
                $rootScope.no_productos += producto.totales.cantidad
            })
            //    $rootScope.no_productos = JSON.parse(localStorage.getItem('pedido')).productos_agregados.length;
        }

        $rootScope.cambiar_pedido = function () {
            Pedido.desasociar_usuario($rootScope.pedido.id)
                .then(function () {
                    Pedido.consultar($rootScope.pedido.id)
                        .then(function (response) {
                            localStorage.setItem('pedido', JSON.stringify(response.data));
                            $rootScope.actualizar_variables();
                        });
                });
        }

        /*
        $rootScope.cambiar_pedido = function () {
            var promise_conservar_pedido = Utilerias.conservar_pedido($rootScope.id_pedido.id)
    
            promise_conservar_pedido.then(() => {
                $rootScope.actualizar_pedido();
            }).catch(function () {
                switch (Utilerias.response_conservar.status) {
                    case 400:
                        toaster.warning("Error", response.data.error_description);
    
                        break;
                    case 500:
                        toaster.error("Error", response.data.error_description);
    
                        break;
                }
            })
    
        }*/

        $rootScope.existe_pedido = function () {
            var no_productos = 0;
            if (localStorage.getItem('pedido') != null) {
                JSON.parse(localStorage.getItem('pedido')).productos_agregados.forEach(function (producto, index) {
                    no_productos += producto.totales.cantidad
                })
            }
            //    no_productos = JSON.parse(localStorage.getItem('pedido')).productos_agregados.length;
            return no_productos > 0;
        }


        $rootScope.validar_pedido_activo = function () {
            Utilerias.validar_pedido_activo(0).then(() => {
                $rootScope.pedido_activo = Utilerias.id_pedido;
                if (localStorage.getItem('shk_token') != null) {
                    Me.informacion().then(function (response) {
                        localStorage.setItem('es_mayor', response.data.contacto.es_mayor);
                    })
                        .catch(function (error) {
                        })
                }

                if ($rootScope.pedido_activo != null && localStorage.getItem('pedido') != null && $rootScope.pedido_activo != $rootScope.pedido.id) {
                    $("#modal_pedido_activo").show();

                    $rootScope.mensaje_pedido_activo = 'Tienes un pedido activo en uno de tus dispositivos. ¿Deseas conservar el pedido activo?'
                }
                else if ($rootScope.pedido_activo != null && localStorage.getItem('pedido') == null) {
                    Utilerias.guardar_pedido($rootScope.pedido_activo).then(() => {
                        ActualizarVariables();
                    });

                }
                else if ($rootScope.pedido_activo == null && localStorage.getItem('pedido') != null) {
                    Utilerias.conservar_pedido($rootScope.pedido.id).then(() => {
                        ActualizarVariables();
                    }).catch(function () {
                        switch (Utilerias.response_conservar.status) {
                            case 400:
                                toaster.warning("Error", response.data.error_description);

                                break;
                            case 500:
                                toaster.error("Error", response.data.error_description);

                                break;
                        }

                    });

                }
            });


        }

        $rootScope.conservar_pedido = function () {
            Utilerias.guardar_pedido($rootScope.pedido_activo).then(() => {
                ActualizarVariables();
            }).catch(function () {
                switch (Utilerias.response_conservar.status) {
                    case 400:
                        toaster.warning("Error", response.data.error_description);

                        break;
                    case 500:
                        toaster.error("Error", response.data.error_description);

                        break;
                }
            });
            $("#modal_pedido_activo").hide();

        }

        $rootScope.cancelar = function () {
            if ($rootScope.pedido.es_anonima) {
                Utilerias.conservar_pedido($rootScope.pedido.id).then(() => {
                    ActualizarVariables();
                }).catch(function () {
                    switch (Utilerias.response_conservar.status) {
                        case 400:
                            toaster.warning("Error", response.data.error_description);

                            break;
                        case 500:
                            toaster.error("Error", response.data.error_description);

                            break;
                    }
                });
            }

            $("#modal_pedido_activo").hide();
        }

        $rootScope.checkout_pedido = function () {


            ///Evento GA4 - Botón seleccionado
            $googleAnalyticsService.eventoBotonSeleccionadoSinCheckout('checkout', 'cart');


            ///Evento GA4 - Begin checkout
            $googleAnalyticsService.eventoCheckoutPedido($rootScope.pedido);


            $rootScope.checkout_bag = false;
            $("body").removeClass("sin-scroll");
            $state.go('inicio.checkout');
            $("#bag").hide();


        }

        /**
         * Eleminar producto del carrito
         * @param {object} pedido
         * @param {object} producto
         */
        $rootScope.eliminar_producto = function (pedido, producto) {


            Pedido.consultar_producto(pedido.id, producto.id).then(function (response) {
                Pedido.eliminar(pedido.id, producto.id).then(function () {
                    Pedido.consultar($rootScope.pedido.id)
                        .then(function (response) {
                            localStorage.setItem('pedido', JSON.stringify(response.data));
                            $rootScope.actualizar_variables();
                            $rootScope.actualizar_pedido();

                            ///Evento GA4 - Eliminar producto de carrito
                            $googleAnalyticsService.eventoEliminarProductoCarrito(pedido, producto);

                            Pedido.sugerencias($rootScope.pedido.id).then(function (response) {
                                $rootScope.sugerencias = response.data;
                                if (response.data.length > 0) {

                                    $timeout(function () {
                                        $rootScope.complementa_comida = true;
                                    });
                                }
                            }).catch(function () { console.log(response.message); });
                        }).catch(function (response) { console.log(response.message); });

                }).catch(function (response) {
                    toaster.pop("error", response.data.message);
                });
            });
        }

        $rootScope.actualizar_variables = function () {
            if (localStorage.getItem('pedido') != null) {
                $rootScope.pedido = JSON.parse(localStorage.getItem('pedido'));

                $rootScope.no_productos = 0;
                JSON.parse(localStorage.getItem('pedido')).productos_agregados.forEach(function (producto, index) {
                    $rootScope.no_productos += producto.totales.cantidad
                })
                if ($rootScope.pedido.cliente != null && $auth.isAuthenticated()) {
                    localStorage.setItem('es_mayor', $rootScope.pedido.cliente.es_mayor)
                }

            }
            else {
                $rootScope.no_productos = 0;
                $rootScope.pedido = null;
            }
        }

        $rootScope.actualizar_pedido = function () {
            if (localStorage.getItem('pedido') != null) {
                Pedido.consultar(JSON.parse(localStorage.getItem('pedido')).id).then(function (response) {
                    localStorage.setItem('pedido', JSON.stringify(response.data));
                    $rootScope.pedido = JSON.parse(localStorage.getItem('pedido'));

                    $rootScope.no_productos = 0;
                    JSON.parse(localStorage.getItem('pedido')).productos_agregados.forEach(function (producto, index) {
                        $rootScope.no_productos += producto.totales.cantidad
                    })
                    if ($auth.isAuthenticated()) {
                        localStorage.setItem('es_mayor', $rootScope.pedido.cliente.es_mayor)
                    }

                }).catch(function (response) {
                    localStorage.removeItem('pedido');
                    switch (response.status) {
                        case 400:
                            toaster.warning("Advertencia", response.data.message);
                            break;
                        case 500:
                            toaster.error("Error", response.data.message);
                            break;
                    }
                });
            } else {

            }
        };

        /**
         *Funciones para la navegación de la página 
         * */

        $rootScope.cuenta = function () {

            ///Evento GA4 - Botón seleccionado
            $googleAnalyticsService.eventoBotonSeleccionadoSinCheckout('ver-cuenta', 'menu');

            $rootScope.checkout_bag = true;
            if ($auth.isAuthenticated())
                $state.go('inicio.cuenta');
            else
                $state.go('inicio.login')
        };


        $rootScope.$on('$stateChangeStart', function (event, toState, fromState) {
            if (toState.name != 'checkout') {
                $rootScope.checkout_bag = true;

                ///Evento GA4 - Eliminar intervalo de errores formulario
                $googleAnalyticsService.eliminarIntervaloErroresFormulario();
            }
        });

        $rootScope.$on('$routeChangeSuccess', function (newRoute, oldRoute, toParams, from, fromParams) {
            if ($location.hash()) $anchorScroll();
        });

        $rootScope.inciar_sesion = function () {

            ///Evento GA4 - Botón seleccionado
            $googleAnalyticsService.eventoBotonSeleccionadoSinCheckout('iniciar-sesión', 'menu');

            $rootScope.checkout_bag = true;
            $state.go('inicio.login')
        };

        $rootScope.inicio = function () {
            $state.go('inicio');
            $rootScope.checkout_bag = true;
        };

        $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
            //$window.ga('send', 'pageview', $location.path());

            Utilerias.validar_estatus_pedido(fromState.name, toState.name);

            //$rootScope.validar_pedido_activo();
            if (toState.name != 'inicio.menu.modal')
                window.scrollTo(0, 0)

            if ($auth.isAuthenticated()) {

                ///Evento GA4 - Push autenticación
                $googleAnalyticsService.eventoAutenticacion(localStorage.getItem("id"));
            }

            $rootScope.stateLoading = false;
            $rootScope.estado_anterior = fromState.name;


            if (fromState.name == "inicio.checkout") {
                $rootScope.estado_anterior = "inicio.checkout"
            }
            else {
                $rootScope.estado_anterior = "inicio"
            }
        })


        function FraudNetScript(tag) {
            var tag = tag || 'head';
            var script = document.createElement('script');
            script.setAttribute("type", "application/json");
            script.setAttribute("fncls", "fnparams-dede7cc5-15fd-4c75-a9f4-36c430ee3a99");
            var guidFraudNet = Guid.newGuid();
            var fraudnet = {
                "f": guidFraudNet,
                "s": entorno.fraudNet
            }

            var inlineScript = document.createTextNode(JSON.stringify(fraudnet));
            script.appendChild(inlineScript);


            checkoutProvider.guidFraudNet = guidFraudNet;

            //var head = document.getElementsByTagName(tag)[0];
            //head.appendChild(script);

            $(script).appendTo(tag);
        }

        function getScript(tag, url, success) {
            var tag = tag || 'head';

            var script = document.createElement('script');
            script.src = url;
            script.setAttribute("type", "text/javascript");
            var head = document.getElementsByTagName(tag)[0];
            //done = false;

            // Attach handlers for all browsers
            //script.onload = script.onreadystatechange = function () {

            //    if (!done && (!this.readyState || this.readyState == 'loaded' || this.readyState == 'complete')) {

            //        done = true;

            //        // callback function provided as param
            //        success();

            //        script.onload = script.onreadystatechange = null;
            //        head.removeChild(script);

            //    };

            //};

            head.appendChild(script);

        };

        FraudNetScript("body");
        getScript("body", "https://c.paypal.com/da/r/fb.js", function () { });

    });


;
angular.module("shakeshack")
    .factory('MeApi', ['$http', function ($http) {
        return {
            nueva_tarjeta: function (request) {
                var oPromise =

                    $http.post(
                        '/api/services/me/1.1/tarjetas/agregar', request)
                        .then(function (response) {
                            return response.data;
                        });
                return oPromise;
            }
        }
    }]);;
angular.module("shakeshack")
    .factory('MenuApi', ['$http', function ($http) {
        return {
            producto: function (id_pro_base, id_tienda) {
                var oPromise = $http.get(`/api/services/menu/1.0/productos/${id_pro_base}?id_tienda=${id_tienda}`).then(function (response) {
                    return response.data;
                });
                return oPromise;
            }
        }
    }]);;
angular.module("shakeshack")
    .factory('PayPalApi', ['$http', 'checkoutProvider', function ($http, checkoutProvider) {
    
        return {
            crear_orden: function (id_pedido) {
                var oPromise = $http.post('/api/services/paypal/1.0/' + id_pedido + 'orden').then(function (response) {
                    return response.data;
                });
                return oPromise;
            }, 


            confirmar_pago: function (id_pedido, pago) {

                var req = {
                    method: 'POST',
                    url: '/api/services/paypal/1.0/' + id_pedido + '/confirmar-pago',
                    headers: {
                        'PayPal-Client-Metadata-Id': checkoutProvider.guidFraudNet
                    },
                    data: pago
                }
                var oPromise = $http(req).then(function (response) {
                    return response.data;
                });
                return oPromise;
            }
        }
    }]);;
angular.module("shakeshack")
    .factory('PedidoApi', ['$http', 'checkoutProvider', function ($http, checkoutProvider) {

        return {

            nuevo_v200: function (request) {
                var oPromise = $http.post('/api/services/pedido/2.0.0/nuevo', request).then(function (response) {
                    return response.data;
                });
                return oPromise;
            },
            nuevo_m1: function (pedido) {
                var oPromise = $http.post('/api/services/pedido/1.1/nuevo', pedido).then(function (response) {
                    return response.data;
                });
                return oPromise;
            },
            pagar_minor1: function (id_pedido) {
                var oPromise = $http.post('/api/services/pedido/1.1/' + id_pedido + 'pago').then(function (response) {
                    return response.data;
                });
                return oPromise;
            },
            confirmar_pago: function (id_pedido, pago) {

                var req = {
                    method: 'POST',
                    url: '/api/services/pedido/1.0/' + id_pedido + '/confirmar-pago',
                    headers: {
                        'PayPal-Client-Metadata-Id': checkoutProvider.guidFraudNet
                    },
                    data: pago
                }
                var oPromise = $http(req).then(function (response) {
                    return response.data;
                });
                return oPromise;
            }
        }
    }]);;
angular.module("shakeshack")
    .factory('Pedido', ['$http', function ($http) {
        return {

          
            nuevo: function (nuevo_pedido) {
                var oPromise = $http.post('/api/services/pedido/1.0/nuevo', nuevo_pedido).then(function (response) {
                    return response.data;
                });
                return oPromise;
            },
            actualizar_pedido: function (request) {
                var oPromise = $http.put('/api/services/pedido/1.0/actualizar', request).then(function (response) {
                    return response.data;
                });
                return oPromise;
            },
            agregar_pedido: function (id_pedido, producto) {
                var oPromise = $http.post('/api/services/pedido/1.0/' + id_pedido + '/producto/agregar', producto).then(function (response) {
                    return response.data;
                });
                return oPromise;
            },
            actualizar_producto: function (id_pedido, producto) {
                var oPromise = $http.patch('/api/services/pedido/1.0/' + id_pedido + '/producto/actualizar', producto).then(function (response) {
                    return response.data;
                });
                return oPromise;
            },
            consultar: function ( id_pedido ) {
                var oPromise = $http.get('/api/services/pedido/1.0/web/consultar/' + id_pedido).then(function (response) {
                    return response.data;
                });
                return oPromise;
            },
            eliminar: function (id_pedido, id_producto) {
                var oPromise = $http.delete('/api/services/pedido/1.0/' + id_pedido +'/producto/eliminar/'+id_producto).then(function (response) {
                    return response.data;
                });
                return oPromise;
            },
            consultar_producto: function (id_pedido, id_producto) {
                var oPromise = $http.get('/api/services/pedido/1.0/' + id_pedido + '/producto/consultar/' + id_producto).then(function (response) {
                    return response.data;
                });
                return oPromise;
            },
            actualizar_costumer: function (id_pedido, costumer) {
                var oPromise = $http.patch('/api/services/pedido/1.0/actualizar-customer/' + id_pedido, costumer).then(function (response) {
                    return response.data;
                });
                return oPromise;
            },
            checkout: function (id_pedido) {
                var oPromise = $http.post('/api/services/pedido/1.0/checkout/' + id_pedido).then(function (response) {
                    return response.data;
                });
                return oPromise;
            },
            merge: function (pedido_viejo) {
                var oPromise = $http.post('/api/services/pedido/1.0/merge', pedido_viejo).then(function (response) {
                    return response.data;
                });
                return oPromise;
            },
            procesar: function (pedido) {
                var oPromise = $http.post('/api/services/pedido/1.0/procesar', pedido).then(function (response) {
                    return response.data;
                });
                return oPromise;
            },
            actualizar_tienda: function (id_pedido,id_tienda) {
                var oPromise = $http.patch('/api/services/pedido/1.0/actualizar-tienda/' + id_pedido, { id_local: id_tienda}).then(function (response) {
                    return response.data;
                });
                return oPromise;
            },
            verificar: function (id_tienda) {
                var oPromise = $http.post('/api/services/pedido/1.0/verificar', { id_local: id_tienda }).then(function (response) {
                    return response.data;
                });
                return oPromise;
            },
            validar: function (pedido) {
                var oPromise = $http.post('/api/services/pedido/1.0/validar', pedido).then(function (response) {
                    return response.data;
                });
                return oPromise;
            },
            cancelar_pedido: function (id_pedido) {
                var oPromise = $http.delete('/api/services/pedido/1.0/cancelar/' + id_pedido).then(function (response) {
                    return response.data;
                });
                return oPromise;
            },
            estatus: function (id_pedido) {
                var oPromise = $http.get('/api/services/pedido/1.0/estatus/' + id_pedido).then(function (response) {
                    return response.data;
                });
                return oPromise;
            } ,
            actualizar_fecha: function (id_pedido, fecha) {
                var oPromise = $http.patch('/api/services/pedido/1.0/actualizar-fecha-entrega/' + id_pedido, { fecha_entrega: fecha }).then(function (response) {
                    return response.data;
                });
                return oPromise;
            },
            aplicar_cupon: function (cupon) {
                var oPromise = $http.post('/api/services/pedido/1.0/cupon/aplicar', cupon).then(function (response) {
                    return response.data;
                });
                return oPromise;

            },
            sugerencias: function (id_pedido) {
                var oPromise = $http.get('/api/services/pedido/1.0/sugerencias/' + id_pedido).then(function (response) {
                    return response.data;
                });
                return oPromise;

            },
            actualizar_informacion_cliente: function (request) {
                var oPromise = $http.post('/api/services/pedido/1.0/actualizar-informacion-cliente/', request).then(function (response) {
                    return response.data;
                });
                return oPromise;

            },
            agregar_metodo_pago_por_id: function (request) {
                var oPromise = $http.post('/api/services/pedido/1.0/agregar-metodo-pago-por-id', request).then(function (response) {
                    return response.data;
                });
                return oPromise;
            }, 

            eliminar_metodo_pago: function (id_pedido, id_metodo_pago) {
                var oPromise = $http.delete('/api/services/pedido/1.0/' + id_pedido +'/eliminar-metodo-pago/'+id_metodo_pago).then(function (response) {
                    return response.data;
                });
                return oPromise;
            }, 
            asociar_metodo_pago: function (request) {
                var oPromise = $http.put('/api/services/pedido/1.0/asociar-metodo-pago', request).then(function (response) {
                    return response.data;
                });
                return oPromise;
            }, 
            asociar_usuario: function(id_pedido) {
            var oPromise = $http.put('/api/services/pedido/1.0/' + id_pedido +'/asociar-usuario').then(function (response) {
                return response.data;
                });
                return oPromise;
            },
            desasociar_usuario: function (id_pedido) {
                var oPromise = $http.put('/api/services/pedido/1.0/' + id_pedido + '/desasociar-usuario').then(function (response) {
                    return response.data;
                });
                return oPromise;
            },

            /**
             * Versión 1.1 Pedido
             **/
            m1_actualizar_fecha: function (id_pedido, horario) {
                var oPromise = $http.patch('/api/services/pedido/1.1/actualizar-fecha-entrega/' + id_pedido, horario).then(function (response) {
                    return response.data;
                });
                return oPromise;
            },
        }
    }]);;
angular.module("shakeshack")
    .controller('PedidoCtrl',
        [
            '$window',
            '$scope',
            '$state',
            '$stateParams',
            'Tienda',
            'Pedido',
            'toaster',
            '$timeout',
            '$rootScope',
            '$googleAnalyticsService',
            function (
                $window,
                $scope,
                $state,
                $stateParams,
                Tienda,
                Pedido,
                toaster,
                $timeout,
                $rootScope,
                $googleAnalyticsService
            ) {
                /////////////////////////////////////////////////////////////////
                // #PROPIEDADES  
                $scope.progressbar = true;
                $scope.error_div = false;

                $scope.totales = {
                    costo: 0,
                    calorias: 0,
                    cantidad: 1,
                    total: 0,
                    total_sin_iva: 0,
                    total_iva: 0

                };
                var copia_producto = {};
                $scope.producto_modal = {};
                $scope.categoria;

                /////////////////////////////////////////////////////////////////

                /////////////////////////////////////////////////////////////////
                // #MÉTODOS

                /**
                 * Selección botón
                 * @param {string} nombreBoton
                 */
                $scope.botonSeleccionado = function (nombreBoton) {

                    ///Evento GA4 - Buscar por cp
                    $googleAnalyticsService.eventoBotonSeleccionado(nombreBoton, 'menu');

                }

                function SetDefualtsProducto(producto_shk) {
                    copia_producto = jQuery.extend(true, {}, producto_shk);
                    $scope.grupo_opciones = []
                    $scope.totales.costo = 0;
                    $scope.totales.calorias = 0;
                }

                $scope.agregar_productos = function () {
                    if ($scope.totales.cantidad == 20)
                        return;
                    else {
                        $scope.totales.cantidad += 1;

                        if ($scope.totales.costo > 0)
                            $scope.totales.total = $scope.totales.costo * $scope.totales.cantidad;
                    }

                }

                $scope.quitar_productos = function () {
                    $scope.totales.cantidad -= 1;
                    $scope.totales.total = $scope.totales.costo * $scope.totales.cantidad;
                }

                $scope.actualizarProducto = function () {
                    $("#update").attr('disabled', true);

                    var error = false;

                    if (localStorage.getItem("pedido") != null) {
                        angular.forEach($scope.producto_modal.grupo_opciones, function (grupo, i) {
                            if (grupo.requiere_seleccion && !grupo.oculto) {
                                //if (grupo.min_selecciones == 1 && grupo.opciones.length == 0) {
                                var opciones_seleccionadas = 0;
                                angular.forEach(grupo.opciones, function (opcion, i) {
                                    if (opcion.seleccionado == true)
                                        opciones_seleccionadas += 1;
                                });

                                if (grupo.min_selecciones != opciones_seleccionadas) {
                                    $("#s" + grupo.id).find(':first-child#error').remove();
                                    $("#s" + grupo.id).prepend('<div style="color: red; " role="alert" clw><strong>Selecciona una opción.</strong> </div>');
                                    error = true;
                                }

                            }

                        });
                        if (!error) {
                            $("#family-diy-actualizar").hide();
                            $("body").removeClass("sin-scroll");

                            var producto_actualizado = {
                                id: $scope.id,
                                cantidad: $scope.totales.cantidad,
                                producto: $scope.producto_modal,
                                timezone: "UTC" + moment().format('Z'),
                            }

                            Pedido.actualizar_producto(JSON.parse(localStorage.getItem('pedido')).id, producto_actualizado)
                                .then(function () {
                                    $rootScope.actualizar_pedido();


                                    toaster.pop({
                                        type: 'success',
                                        title: 'Se actualizó el producto correctamente',
                                        body: '',
                                        timeout: 3000
                                    });
                                })
                                .catch(function (response) {
                                    $("#update").attr('disabled', false);
                                    switch (response.status) {
                                        case 400:
                                            toaster.warning("Advertencia", response.data.message);

                                            break;
                                        case 500:
                                            toaster.error("Error", response.data.message);

                                            break;
                                    }
                                })
                        }
                        else {



                            $("#update").attr('disabled', false);

                            $("#grupo_opciones_actualizar").animate({
                                scrollTop: document.getElementById("img_c").offsetHeight
                            }, 800);

                            $scope.error_div = true;

                            $timeout(function () {
                                $scope.error_div = false;
                            }, 5000)
                        }
                    }
                }

                $scope.addSugerencia = function () {
                    $("#add_producto_sugerencia").attr('disabled', true);

                    var error = false;

                    angular.forEach($scope.producto_modal.grupo_opciones, function (grupo, i) {
                        if (grupo.requiere_seleccion && !grupo.oculto) {
                            //if (grupo.min_selecciones == 1 && grupo.opciones.length == 0) {
                            var opciones_seleccionadas = 0;
                            angular.forEach(grupo.opciones, function (opcion, i) {
                                if (opcion.seleccionado == true)
                                    opciones_seleccionadas += 1;
                            });

                            if (grupo.min_selecciones != opciones_seleccionadas) {
                                $("#g" + grupo.id).find(':first-child#error').remove();

                                $("#g" + grupo.id).prepend('<div style="color: red;" id="error  " role="alert"><strong>Selecciona una opción.</strong> </div>');
                                error = true;
                            }

                        }

                    });

                    if (!error) {
                        $("#family-diy-sugerencia").hide();
                        $("body").removeClass("sin-scroll");



                        var nuevo_producto = {
                            cantidad: $scope.totales.cantidad,
                            producto: $scope.producto_modal,
                            timezone: "UTC" + moment().format('Z'),
                        }

                        if (localStorage.getItem("pedido") !== null) {
                            var id_pedido = JSON.parse(localStorage.getItem('pedido')).id;
                            Pedido.agregar_pedido(id_pedido, nuevo_producto)
                                .then(function () {
                                    $rootScope.actualizar_pedido();
                                    Pedido.sugerencias($rootScope.pedido.id).then(function (response) {
                                        $rootScope.sugerencias = response.data;
                                    })
                                    toaster.pop({
                                        type: 'success',
                                        title: 'Se agregó correctamente el producto',
                                        body: '',
                                        timeout: 3000
                                    });

                                })
                                .catch(function (response) {
                                    switch (response.status) {
                                        case 400:
                                            toaster.warning("Advertencia", response.data.message);
                                            break;
                                        case 500:
                                            toaster.error("Error", response.data.message);
                                            break;
                                    }
                                });
                        }
                    }
                    else {
                        $scope.error_div = true;

                        $timeout(function () {
                            $scope.error_div = false;
                        }, 5000)
                        $("#add_producto_sugerencia").attr('disabled', false);

                        $("#grupo_opciones_sugerencia").animate({
                            scrollTop: document.getElementById("img_s").offsetHeight
                        }, 800);
                    }

                }

                $scope.addProductoACanasta = function () {
                    $("#add_producto").attr('disabled', true);

                    var error = false;

                    angular.forEach($scope.producto_modal.grupo_opciones, function (grupo, i) {
                        if (grupo.requiere_seleccion && !grupo.oculto) {
                            //if (grupo.min_selecciones == 1 && grupo.opciones.length == 0) {
                            var opciones_seleccionadas = 0;
                            angular.forEach(grupo.opciones, function (opcion, i) {
                                if (opcion.seleccionado == true)
                                    opciones_seleccionadas += 1;
                            });

                            if (grupo.min_selecciones != opciones_seleccionadas) {
                                $("#a" + grupo.id).find(':first-child#error').remove();

                                $("#a" + grupo.id).prepend('<div style="color: red;" id="error" role="alert"><strong>Selecciona una opción.</strong> </div>');
                                error = true;
                            }

                        }

                    });

                    if (!error) {
                        $("#family-diy").hide();
                        $("body").removeClass("sin-scroll");

                        var nuevo_pedido = {
                            id_tienda: $stateParams.id,
                            timezone: "UTC" + moment().format('Z'),
                        }

                        var nuevo_producto = {
                            cantidad: $scope.totales.cantidad,
                            producto: $scope.producto_modal,
                            timezone: "UTC" + moment().format('Z'),
                        }
                      

                        //if (nuevo_producto.producto.id_pro_base == 7358 && nuevo_producto.producto.nombre.toLowerCase() == 'chicken bites') {
                        //    try {
                        //        console.log(nuevo_producto.producto.nombre.toLowerCase());
                        //        let opcion_prod = nuevo_producto.producto.grupo_opciones.find(go => go.id == 1).opciones.find(o => o.seleccionado === true).name.toLowerCase();

                        //        //console.log('Opcion producto seleccionado:' + opcion_prod);
                        //        //nuevo_producto.producto.grupo_opciones.find(f => f.id == 9).opciones.find(f => f.seleccionado == true).extra = 888;
                        //        //let opcion = nuevo_producto.producto.grupo_opciones.find(f => f.id == 7).opciones.find(f => f.seleccionado == true);
                        //        //console.log(opcion);

                        //        switch (opcion_prod) {
                        //            case '10pz':
                        //                console.log('Entra 10pz');
                        //                nuevo_producto.producto.grupo_opciones.find(f => f.id == 9).opciones.find(f => f.seleccionado == true).extra = 2;
                        //                console.log('Aderezo modificado 10pz');
                        //                break;
                        //            default:
                        //                console.log('Entra 6pz');
                        //                nuevo_producto.producto.grupo_opciones.find(f => f.id == 9).opciones.find(f => f.seleccionado == true).extra = 1;
                        //                console.log('Aderezo modificado 10pz');
                        //                break;
                        //        }
                        //    } catch (exx) {
                        //        console.log('Error al establecer aderezos para chicken bites');
                        //        console.error(exx);
                        //    }
                        //    console.log(nuevo_producto);                           
                        //}
                        
                        ///Evento GA4 - Agregar producto a carrito
                        $googleAnalyticsService.eventoAgregarProductoACarrito
                            (
                                $scope.categoria,
                                $scope.producto_modal,
                                $("h2[name='nombre-tienda']").data("ga4-nombre-tienda"),
                                $scope.totales
                            );

                        if (localStorage.getItem("pedido") === null) {
                            Pedido.nuevo(nuevo_pedido)
                                .then(function (response) {
                                    var id_pedido = response.data.id_pedido;
                                    localStorage.setItem('idPedido', response.data.id_pedido);
                                    Pedido.agregar_pedido(id_pedido, nuevo_producto)
                                        .then(function () {
                                            Pedido.consultar(id_pedido).then(function (response) {
                                                localStorage.setItem('pedido', JSON.stringify(response.data));
                                                $rootScope.pedido = response.data;
                                                $rootScope.no_productos = 0;
                                                JSON.parse(localStorage.getItem('pedido')).productos_agregados.forEach(function (producto, index) {
                                                    $rootScope.no_productos += producto.totales.cantidad
                                                })


                                                toaster.pop({
                                                    type: 'success',
                                                    title: 'Se agregó correctamente el producto',
                                                    body: '',
                                                    timeout: 3000
                                                });

                                            })
                                        })
                                        .catch(function (response) {
                                            $("#add_producto").attr('disabled', false);

                                            switch (response.status) {
                                                case 400:
                                                    toaster.warning("Advertencia", response.data.message);
                                                    break;
                                                case 500:
                                                    toaster.error("Error", response.data.message);
                                                    break;
                                            }
                                        });
                                })
                                .catch(function (response) {

                                    switch (response.status) {
                                        case 400:
                                            toaster.warning("Advertencia", response.data.message);

                                            break;
                                        case 500:
                                            toaster.error("Error", response.data.message);

                                            break;

                                    }
                                });
                        }
                        else {
                            var id_pedido = JSON.parse(localStorage.getItem('pedido')).id;
                            Pedido.agregar_pedido(id_pedido, nuevo_producto)
                                .then(function () {
                                    $rootScope.actualizar_pedido();

                                    toaster.pop({
                                        type: 'success',
                                        title: 'Se agregó correctamente el producto',
                                        body: '',
                                        timeout: 3000
                                    });
                                })
                                .catch(function (response) {
                                    switch (response.status) {
                                        case 400:
                                            toaster.warning("Advertencia", response.data.message);
                                            break;
                                        case 500:
                                            toaster.error("Error", response.data.message);
                                            break;
                                    }
                                });
                        }
                    }
                    else {

                        $timeout(function () {
                            $scope.error_div = false;
                        }, 5000)
                        $scope.error_div = true;

                        $("#add_producto").attr('disabled', false);
                        document.getElementById("img_a");

                        $("#grupo_opciones_a").animate({
                            scrollTop: document.getElementById("img_a").offsetHeight
                        }, 800);

                    }

                }

                $scope.show_modal_actualizar = function (producto) {
                    $("#update").attr('disabled', false);
                    $("body").addClass("sin-scroll");
                    $scope.error_div = false;

                    SetDefualtsProducto(producto);
                    //$scope.totales.calorias = producto.max_calories;
                    $scope.producto_modal = copia_producto.detalle;
                    $scope.id = copia_producto.id;
                    $scope.totales = copia_producto.totales;
                    $state.go('inicio.modal-actualizar');
                    $("#family-diy-actualizar").show();
                    $("#grupo_opciones_actualizar").animate({
                        scrollTop: 0
                    }, 800);

                }

                $scope.show_modal_sugerencia = function (producto) {
                    $("#add_producto_sugerencia").attr('disabled', false);
                    $("body").addClass("sin-scroll");
                    $scope.error_div = false;
                    SetDefualtsProducto(producto);

                    $scope.totales = {
                        costo: producto.costo * 1,
                        calorias: producto.max_calories,
                        cantidad: 1,
                        total: producto.costo * 1,
                        total_sin_iva: producto.preciosiniva * 1,
                        total_iva: producto.importeiva * 1
                    };
                    $scope.producto_modal = copia_producto;
                    $("#family-diy-sugerencia").show();
                    $('#grupo_opciones_sugerencia').scrollTop(0);
                }

                /**
                 * Mostrar el modal con la información producto
                 * @param {object} producto
                 * @param {object} categoria
                 */
                $scope.show_modal = function (producto, categoria) {

                    ///Evento GA4 - Mostrar producto
                    $googleAnalyticsService.eventoMostrarProducto(categoria, producto);

                    $("body").addClass("sin-scroll");
                    $scope.error_div = false;

                    $("#add_producto").attr('disabled', false);
                    SetDefualtsProducto(producto);

                    $scope.totales = {
                        costo: producto.costo * 1,
                        calorias: producto.max_calories,
                        cantidad: 1,
                        total: producto.costo * 1,
                        total_sin_iva: producto.preciosiniva * 1,
                        total_iva: producto.importeiva * 1
                    };
                    //$scope.totales.calorias = producto.max_calories;
                    $scope.producto_modal = copia_producto;
                    $scope.categoria = categoria;
                    $state.go('inicio.menu.modal');
                    $("#family-diy").show();
                    $('#grupo_opciones_a').scrollTop(0);
                    $('#grupo_opciones_sugerencia').scrollTop(0);

                }

                $scope.close_modal = function () {
                    $scope.producto_modal = {};
                    $("body").removeClass("sin-scroll");

                    $("#family-diy").hide();
                    $("#family-diy-actualizar").hide();
                    $("#family-diy-sugerencia").hide();
                }
                /////////////////////////////////////////////////////////////////



            }])
    .directive('shkElement', [function () {
        return {
            scope: {
                addOption: '&',
                producto_seleccionado: '='
            },

            link: function (scope, element, attr, ctrl) {

                scope.addOption = function (option, grupo) {


                    if (element.attr('status') === "true") {
                        attr.$set('status', "false");
                        element.removeClass('active');

                        switch (grupo.id) {
                            case 8:
                                scope.totales.calorias += parseInt(option.calories);
                                break;

                            case 1:
                            case 3:
                            case 2:

                                scope.totales.costo -= (option.cost - scope.producto_modal.costo);
                                scope.totales.total_sin_iva -= (option.costiva - scope.producto_modal.importeiva);
                                scope.totales.total_iva -= (option.costsiniva - scope.producto_modal.preciosiniva);
                                scope.totales.calorias -= (parseInt(option.calories) - scope.producto_modal.max_calories);

                                break;
                            case 9:
                                scope.totales.total_sin_iva = option.costiva;
                                scope.totales.total_iva = option.costsiniva
                                scope.totales.calorias = parseInt(option.calories);

                            default:
                                scope.totales.costo -= option.cost;
                                scope.totales.calorias -= parseInt(option.calories);
                                scope.totales.total_sin_iva -= option.costsiniva;
                                scope.totales.total_iva -= option.costiva;
                                break;
                        }

                        scope.totales.total = scope.totales.costo * scope.totales.cantidad;

                        option.seleccionado = false;
                    }
                    else {
                        if (element.parent().find('button[max="true"].active').length > 0) {
                            element.parent().find('button[max="true"].active').removeClass('active');
                            element.parent().find('button[status="true"]').each(function (i, e) {
                                angular.element(e).attr('status', 'false')

                                angular.forEach(grupo.opciones, function (producto, i) {
                                    if ((producto.id_pro > 0 && producto.id_pro == angular.element(e).attr('id')) || (producto.id_op > 0 && producto.id_op == angular.element(e).attr('id'))) {
                                        if (producto.cost != 0) {

                                            switch (grupo.id) {
                                                case 1:
                                                case 2:
                                                case 3:
                                                case 9:

                                                    scope.totales.costo -= (producto.cost - scope.producto_modal.costo);
                                                    scope.totales.total_sin_iva -= (producto.costiva - scope.producto_modal.importeiva);
                                                    scope.totales.total_iva -= (producto.costsiniva - scope.producto_modal.preciosiniva);
                                                    scope.totales.calorias -= (parseInt(producto.calories) - scope.producto_modal.max_calories);

                                                    break;
                                                default:
                                                    scope.totales.costo -= producto.cost;
                                                    scope.totales.total_sin_iva -= producto.costiva;
                                                    scope.totales.total_iva -= producto.costsiniva;
                                                    scope.totales.calorias -= parseInt(producto.calories);
                                                    break;

                                            }
                                        }
                                        producto.seleccionado = false;
                                    }

                                });


                            })

                        }

                        switch (grupo.id) {
                            case 8:
                                scope.totales.calorias -= parseInt(option.calories);
                                break;
                            case 1:
                            case 2:
                            case 3:

                                scope.totales.costo += (option.cost - scope.producto_modal.costo);
                                scope.totales.total_sin_iva += (option.costiva - scope.producto_modal.importeiva);
                                scope.totales.total_iva += (option.costsiniva - scope.producto_modal.preciosiniva);
                                scope.totales.calorias += (parseInt(option.calories) - scope.producto_modal.max_calories);
                                break;
                            case 9:
                                scope.totales.total_sin_iva = option.costiva;
                                scope.totales.total_iva = option.costsiniva
                                scope.totales.calorias = parseInt(option.calories);

                                break;
                            default:
                                scope.totales.costo += option.cost;
                                scope.totales.calorias += parseInt(option.calories);
                                scope.totales.total_sin_iva += option.costsiniva;
                                scope.totales.total_iva += option.costiva;

                                break;
                        }
                        scope.totales.total = scope.totales.costo * scope.totales.cantidad;

                        attr.$set('status', "true");
                        element.addClass('active');
                        option.seleccionado = true;
                    }
                }


            },
            scope: true

        }
    }]);;
angular.module("shakeshack")
    .factory('Orden', ['$http', function ($http) {
        return {
          
            consultar_orden: function (id_orden) {
                var oPromise = $http.get('/api/services/orden/1.0/consultar/' + id_orden ).then(function (response) {
                    return response.data;
                });
                return oPromise;
            }
        }
    }]);;
angular.module('shakeshack')
    .provider('pedidoProvider', function () {
        return {
            $get: function ($rootScope, checkoutProvider, mensajes) {
                return {
                    pedido: function () {
                        return localStorage.getItem('pedido') != null ? JSON.parse(localStorage.getItem('pedido')) : null;
                    },
                    validaPedido: function () {
                        if (localStorage.getItem('pedido') === null)
                            return { estatus: false, seccion_pagina: "checkout_info", mensaje: "" };


                        if (checkoutProvider.hora_entrega === false)
                            return { estatus: false, seccion_pagina: "horario", mensaje: mensajes.mensaje_selecciona_hora };


                        if (checkoutProvider.metodo_pago === false)
                            return { estatus: false, seccion_pagina: "metodo_pago", mensaje: mensajes.mensaje_selecciona_forma_pago };



                        //if (!checkoutProvider.metodo_pago)
                        //    return { estatus: false, seccion_pagina: "metodo_pago", mensaje: "Selecciona la hora de entrega" };

                        return { estatus: true, seccion_pagina: "", mensaje: "" };
                    }
                };
            }
        };
    });
;


app.provider('paypalProvider', function () {
    this.$get =  function (paypal, $http) {
        var paypalProvider = {};

        ////paypalProvider.obtenerScript = function () {
        ////    var oPromise = $http({
        ////        method: 'GET',
        ////        url: "https://www.paypal.com/sdk/js?client-id=" + paypal.client +
        ////            "&commit=" + paypal.commit +
        ////            "&locale=" + paypal.locale +
        ////            "&debug=" + paypal.debug,
        ////        headers: {
        ////            'Content-Type': 'application/json',
        ////            'Access-Control-Allow-Origin': window.location.origin
        ////        }
        ////    });

        //    //var oPromise = $http.get
        //    //    (
                   
        //    //    ).then(function (response) {
        //    //    return response.data;
        //    //});
        //    return oPromise;
        //}
        //paypalProvider.obtenerScript = function () {
        //    var oPromise = $http.get
        //        (
        //            window.location.origin + "/Scripts/paypal.checkout.js"
        //            //"https://www.paypalobjects.com/api/checkout.js"
        //        ).then(function (response) {
        //        return response.data;
        //    });
        //    return oPromise;
        //}

        paypalProvider.src = "https://www.paypal.com/sdk/js?client-id=" + paypal.client +
            "&commit=" + paypal.commit +
            "&locale=" + paypal.locale +
            "&currency=MXN" +
            "&disable-funding=card"+
            "&debug=" + paypal.debug;
        //paypalProvider.src = "https://www.paypalobjects.com/api/checkout.js";

        return paypalProvider;
    };
});;


app.provider('stripeProvider', function () {
    this.$get = function ($http) {
        var stripeProvider = {};

 
        stripeProvider.obtenerScript = function () {
            var oPromise = $http.get
                (
                    window.location.origin + "/Scripts/stripe.v3.js"
                ).then(function (response) {
                    return response.data;
                });
            return oPromise;
        }

        //paypalProvider.src = "https://www.paypalobjects.com/api/checkout.js";

        return stripeProvider;
    };
});;


app.provider('scriptsProvider', function () {
    this.$get = function ($http) {
        var scriptsProvider = {};

        //paypalProvider.obtenerScript = function () {
        //    var oPromise = $http.get
        //        (
        //            "https://www.paypal.com/sdk/js?client-id=" + paypal.client +
        //            "&commit=" + paypal.commit +
        //            "&locale=" + paypal.locale +
        //            "&debug=" +paypal.debug
        //        ).then(function (response) {
        //        return response.data;
        //    });
        //    return oPromise;
        //}



        scriptsProvider.obtenerScript = function (tag, url) {
            tag = tag || "<head>"
            var script = document.createElement('script');
            script.src = url;

            var head = document.getElementsByTagName(tag)[0], done = false;

            // Attach handlers for all browsers
            script.onload = script.onreadystatechange = function () {

                if (!done && (!this.readyState || this.readyState == 'loaded' || this.readyState == 'complete')) {

                    done = true;

                    // callback function provided as param
                    success();

                    script.onload = script.onreadystatechange = null;
                    head.removeChild(script);

                };

            };

            head.appendChild(script);

        }

        scriptsProvider.obtenerScriptCreditCard = function () {
            var oPromise = $http.get
                (
                    window.location.origin + "/Scripts/card-js.min.js"
                ).then(function (response) {
                    return response.data;
                });
            return oPromise;
        }

        //paypalProvider.src = "https://www.paypal.com/sdk/js?client-id=" + paypal.client +
        //    "&commit=" + paypal.commit +
        //    "&locale=" + paypal.locale +
        //    "&debug=" + paypal.debug;

        return scriptsProvider;
    };
});;
//app.provider('usuarioProvider', function () {
//    this.$get = ["", function () {
//        var usuarioProvider = {};

//        usuarioProvider.invitado = false;

//        usuarioProvider.usuario_registrado = {}

//        return usuarioProvider;
//    }];
//});


angular.module('shakeshack')
    .provider('usuarioProvider', function ()
    {
        return {

            $get: function ($rootScope) {
                $rootScope.agregar_tarjeta = false;
                return {
                    invitado: false,
                    esInvitado: function () {
                        return localStorage.getItem("shk_token") == null;
                    }, 
                    init: function () {
                        $rootScope.agregar_tarjeta = false;
                    }
                };
            }
        };
    });;
angular.module('shakeshack')
    .provider('checkoutProvider', function () {
        return {
            $get: function (
                $rootScope,
                $timeout,
                $state,
                Pedido
            ) {
                $rootScope.botonPagoTarjeta = false;
                $rootScope.error_seccion = '';
                $rootScope.progress_button_class = false;
                $rootScope.seccion = '';
                $rootScope.guardarTarjeta = false;
                $rootScope.mostar_error_seccion = false;
                $rootScope.cupon = null;
                $rootScope.cuponAplicado = false;


                return {
                    paymentRequest: null,
                    guardarTarjeta: false,
                    actualizarCheckout: function () {
                        Pedido.consultar(JSON.parse(localStorage.getItem('pedido')).id)
                            .then((respuesta) => {

                                localStorage.setItem('pedido', JSON.stringify(respuesta.data));
                                $rootScope.pedido = JSON.parse(localStorage.getItem('pedido'));

                                $rootScope.no_productos = 0;
                                JSON.parse(localStorage.getItem('pedido')).productos_agregados.forEach(function (producto, index) {
                                    $rootScope.no_productos += producto.totales.cantidad
                                })


                            }).catch((respuesta) => {

                            });
                    },
                    revisarPedidoPagado: function () {
                        try {
                            Pedido.consultar(JSON.parse(localStorage.getItem('pedido')).id)
                                .then((respuesta) => {
                                    let pedido = JSON.stringify(respuesta.data);
                                    if (pedido.estatus === 'pagada') {
                                        $state.go('inicio.exitoso', { id: $rootScope.pedido.id });
                                        localStorage.removeItem('pedido');
                                        $rootScope.actualizar_pedido();
                                        $rootScope.progress_button_class = false;

                                    }
                                }).catch((respuesta) => {

                                });
                        } catch (e) {

                        }

                    },
                    modal_esperar: function (mostrar) {
                        var modal_background = document.getElementById("background");
                        modal_background.style.display = mostrar ? "block" : "none";


                        if (mostrar == false) $("#paypal-button-container").show();
                        else $("#paypal-button-container").hide();
                    },
                    confirmar: function () {
                        var modal_background = document.getElementById("background");
                        modal_background.style.display = "none";
                        $rootScope.progress_button_class = false;
                        $("#paypal-button-container").show();

                    },
                    scrollSeccion: function (respuesta) {
                        $rootScope.progress_button_class = false;
                        $rootScope.seccion = respuesta.seccion_pagina;
                        $rootScope.error_seccion = respuesta.mensaje;
                        $rootScope.mostar_error_seccion = true;

                        respuesta.seccion_pagina = "#" + respuesta.seccion_pagina || 'body'

                        var offset = $(respuesta.seccion_pagina).offset().top;
                        $('html, body').animate({
                            scrollTop: offset
                        }, 1000);
                    },
                    //variable para guardar la tarjeta seleccionada por el usuario
                    token_tarjeta: null,
                    /*varibles para validar que el pedido tenga los datos correctos*/
                    metodo_pago: false,
                    hora_entrega: false,
                    init: function () {
                        this.hora_entrega = false;
                        this.cupon = null;
                        this.cuponAplicado = false;
                        this.paymentRequest = null;
                        this.metodo_pago = false;
                        this.token_tarjeta = null;

                        $rootScope.guardarTarjeta = false;
                        $rootScope.progress_button_class = false;
                        $rootScope.botonPagoTarjeta = false;
                        $rootScope.error_seccion = '';
                        $rootScope.seccion = ''
                        $rootScope.mostar_error_seccion = false;

                        $rootScope.cuponAplicado = $rootScope.pedido.cupones.length >= 1;
                        $("#aplicar_cupon").attr('disabled', this.cuponAplicado);
                        $("#cupon_txt").attr('disabled', this.cuponAplicado);
                        $rootScope.cupon = this.cuponAplicado ? $rootScope.pedido.cupones[0].cupon : null;


                    }
                };
            }
        };
    });;
app.service('$googleAnalyticsService', function
(
    errores,
    $rootScope
)
{

    //////////////////////////////////////////////////////////////////////////
    // #PROPIEDADES
    this.intervaloDeErrores;

    //////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////
    // #EVENTOS-TIENDAS

    /**
     * Evento GA4 buscar por código postal
     * @param {string} codigoPostal
     */
    this.eventoBuscarPorCP = function (codigoPostal) {
        try {
            return window.dataLayer.push({
                'event': 'gg.ga4.trackEvent',
                'eventName': 'user_interaction',
                'eventParams': {
                    'action': 'click',
                    'element': 'buscar',
                    'section': 'pide ahora',
                    'zip_code': codigoPostal
                }
            });
        } catch (e) {
            console.log(e);
        }
    }

    /**
     * Evento GA4 seleccion de rango de búsqueda
     * @param {any} rango
     */
    this.eventoSeleccionRangos = function (rango) {
        try {
            window.dataLayer.push({
                'event': 'gg.ga4.trackEvent',
                'eventName': 'user_interaction',
                'eventParams': {
                    'action': 'select',
                    'element': 'rango',
                    'section': 'pide ahora',
                    'distance_range': rango.descripcion
                }
            });

        } catch (e) {
            console.log(e)
        }
    }

    /**
     * Evento GA4 comenzar pedido
     * @param {number} idTienda
     */
    this.eventoComenzarPedido = function (idTienda) {
        try {
            window.dataLayer.push({
                'event': 'gg.ga4.trackEvent',
                'eventName': 'user_interaction',
                'eventParams': {
                    'action': 'click',
                    'element': 'comenzar pedido',
                    'section': 'pide ahora',
                    'store': idTienda
                }
            });

        } catch (e) {
            console.log(e);
        }
    }

    //////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////
    // EVENTOS-MENÚ

    /**
     * Evento selección de categoría del menú de tienda
     * @param {string} categoria
     */
    this.eventoSeleccionCategoria = function (categoria) {
        try {
            window.dataLayer.push({
                'event': 'gg.ga4.trackEvent',
                'eventName': 'user_interaction',
                'eventParams': {
                    'action': 'click',
                    'element': categoria,
                    'section': 'menu'
                }
            });

        } catch (e) {
            console.log(e);
        }
    }

    /**
     * Selección de producto
     * @param {object} categoria
     * @param {object} producto
     */
    this.eventoSeleccionarProducto = function (categoria, producto) {
        try {
            window.dataLayer.push({
                'event': 'gg.ga4.trackEvent',
                'eventName': 'select_item',
                'item_list_id': categoria.id_categoria,
                'item_list_name': categoria.tipo,
                'section': 'menu',
                'currency': 'MXN',
                'value': producto.costo, // aquí restar discount si es que existe
                'items': [
                    {
                        'item_id': producto.id_pro_base,
                        'item_name': producto.nombre,
                        'index': 1,
                        'item_brand': categoria.nombre,
                        'price': producto.costo,
                        'discount': 0.0,
                    }
                ]
            })

        } catch (e) {
            console.log(e);
        }
    }

    /**
     * Mostrar producto en modal
     * @param {object} categoria
     * @param {object} producto
     */
    this.eventoMostrarProducto = function (categoria, producto) {
        try {

            window.dataLayer.push({
                'event': 'gg.ga4.trackEvent',
                'eventName': 'view_item',
                'section': 'pdp',
                'currency': 'MXN',
                'value': producto.costo,
                'items': [
                    {
                        'item_id': producto.id_pro_base,
                        'item_name': producto.nombre,
                        'index': 2,
                        'item_brand': categoria,
                        'price': producto.costo,
                        'discount': 0.0,
                    }
                ]
            })

        } catch (e) {
            console.log(e)
        }
    }

    /**
     * Agregar producto al carrito
     * @param {object} categoria
     * @param {object} producto
     * @param {object} idTienda
     * @param {object} totales
     */
    this.eventoAgregarProductoACarrito = function (categoria, producto, idTienda, totales) {


        try {
            var productoGA4 = MapearProductoShakeShackAProductoGA4(categoria, producto, totales);

            var eventoGA4 = {
                'event': 'gg.ga4.trackEvent',
                'eventName': 'add_to_cart',
                'section': 'pdp',
                'currency': 'MXN',
                'value': totales.total, // sumar el precio de cada ítem del carrito, restando descuentos
                'store': idTienda,
                'items': []
            };

            eventoGA4.items.push(productoGA4);
            window.dataLayer.push(eventoGA4);
        } catch (e) {
            console.log(e);
        }
    }

    /**
     * Scroll
     * @param {any} categorias
     */
    this.eventoScroll = function(categorias){
        try {
            angular.forEach(categorias, function (categoria, indiceGrupo) {

                if (categoria.productosGA4 !== undefined && categoria.productosGA4.length > 0) {
                    var eventoGA4 = {
                        'event': 'gg.ga4.trackEvent',
                        'eventName': 'view_item_list',
                        'item_list_id': '',
                        'item_list_name': categoria.nombre,
                        'section': 'menu',
                        'items': []
                    }

                    angular.forEach(categoria.productosGA4, function (producto, indiceProducto) {
                        var itemGA4 = {
                            item_id: producto.id_pro_base,
                            item_name: `${producto.nombre.replace(/\s+/g, '')}`,
                            index: indiceProducto,
                            item_brand: categoria.nombre,
                            price: producto.costo
                        }
                        eventoGA4.items.push(itemGA4);
                    });

                    window.dataLayer.push(eventoGA4);
                }

            });
        } catch (e) {
            console.log(e)
        }
    }
    //////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////
    // #EVENTOS-BOTÓN

    /**
     * Botón clickeado
     * @param {string} botonSeleccionado
     */
    this.eventoBotonSeleccionadoSinCheckout = function (botonSeleccionado, seccion) {
        try {
            window.dataLayer.push({
                'event': 'gg.ga4.trackEvent',
                'eventName': 'user_interaction',
                'eventParams': {
                'action': 'click',
                'element': botonSeleccionado,
                'section': seccion
               }
            })

        } catch (e) {
            console.log(e);
        }
    }

    //////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////
    // #EVENTOS-FORMULARIO
    /**
     * Envió información de formualario
     * @param {any} metodoDeIngreso
     */
    this.eventoEnvioInformacionFormulario = function (nombreEvento, metodoDeIngreso) {
        try {
            window.dataLayer.push({
                'event': 'gg.ga4.trackEvent',
                'eventName': nombreEvento,
                'method': metodoDeIngreso
            });

        } catch (e) {
            console.log(e)
        }
    }
    //////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////
    // #CARRITO

    /**
     * Mostrar carrito
     * @param {object} pedido
     */
    this.eventoMostrarCarrito = function (pedido) {
        try {


            var eventoGA4 = {
                'event': 'gg.ga4.trackEvent',
                'eventName': 'view_cart',
                'currency': 'MXN',
                'section': 'cart',
                'value': pedido.pago[2]?.cantidad,
                'store': pedido.tienda.nombre,
                'items': [
                ]
            }

            angular.forEach(pedido.productos_agregados, function (producto, indiceGrupo) {
                eventoGA4.items.push(MapearProductoShakeShackAProductoGA4(producto.categoria, producto.detalle, producto.totales));
            });
                
            window.dataLayer.push(eventoGA4);

        } catch (e) {
            console.log(e)
        }
    }

    /**
     * Eliminar carrito
     * @param {object} pedido
     * @param {object} producto
     */
    this.eventoEliminarProductoCarrito = function (pedido, producto) {
        try {

            var productoGA4 = MapearProductoShakeShackAProductoGA4(producto.categoria, producto.detalle, producto.totales);

            var eventoGA4 = {
                'event': 'gg.ga4.trackEvent',
                'eventName': 'remove_from_cart',
                'section': 'cart',
                'currency': 'MXN',
                'value': pedido.pago[2]?.cantidad,
                'store': pedido.tienda.nombre,
                'items': []
            };

            eventoGA4.items.push(productoGA4);
            window.dataLayer.push(eventoGA4);
        } catch (e) {
            console.log(e);
        }
    }


    /**
     * Begin checkout
     * @param {any} pedido
     */
    this.eventoCheckoutPedido = function (pedido) {
        try {


            var eventoGA4 = {
                'event': 'gg.ga4.trackEvent',
                'eventName': 'begin_checkout',
                'currency': 'MXN',
                'section': 'checkout',
                'step_name': 'pedido',
                'step_number': 3,
                'login_from': 'sin checkout',
                'value': pedido.pago[2]?.cantidad,
                'store': pedido.tienda.nombre,
                'items': [
                ]
            }

            angular.forEach(pedido.productos_agregados, function (producto, indiceGrupo) {
                eventoGA4.items.push(MapearProductoShakeShackAProductoGA4(producto.categoria, producto.detalle, producto.totales));
            });

            window.dataLayer.push(eventoGA4);

        } catch (e) {
            console.log(e)
        }
    }

    //////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////
    // #AUTENTICACION

    /**
     * Push de autenticación
     * @param {string} usuario
     */
    this.eventoUsuarioAutenticado = function (usuario) {
        try {
            window.dataLayer.push({ 'event': 'authentication', 'userId': usuario });
        } catch (e) {
            console.log(e)
        }
    }
    //////////////////////////////////////////////////////////////////////////



    //////////////////////////////////////////////////////////////////////////
    // #CHECKOUT

    /**
     * Botones y acciones seleccionadas
     * @param {string} accion
     * @param {string} botonSeleccionado
     * @param {string} nombreDelPaso
     * @param {number} numeroDePaso
     */
    this.eventoBotonSeleccionado = function (seccion ,accion, botonSeleccionado,nombreDelPaso,  numeroDePaso) {
        try {
            window.dataLayer.push({
                'event': 'gg.ga4.trackEvent',
                'eventName': 'user_interaction',
                'eventParams': {
                    'action': accion,
                    'element': botonSeleccionado,
                    'section': seccion,
                    'step_name': nombreDelPaso,
                    'step_number': numeroDePaso
               }
            })

        } catch (e) {
            console.log(e)
        }
    }

    /**
     * Botones y acciones formulario invitado
     * @param {string} botonSeleccionado
     */
    this.eventoBotonSeleccionadoCheckoutInvitado = function (botonSeleccionado) {
        try {
            window.dataLayer.push({
                'event': 'gg.ga4.trackEvent',
                'eventName': 'form_send',
                'eventParams': {
                    'action': 'click',
                    'element': botonSeleccionado,
                    'section': 'checkout',
                    'step_name': 'continuar como invitado',
                    'step_number': 2,
                    'form_name': 'continuar como invitado'
                }
            });

        } catch (e) {
            console.log(e)
        }
    }



    /**
     * Envío información formulario invitado
     * */
    this.eventoEnvioInformacionFormularioInvitado = function () {
        try {
            window.dataLayer.push({
                'event': 'gg.ga4.trackEvent',
                'eventName': 'generate_lead',
                'form_name': 'continuar como invitado',
                'section': 'login'
            })

        } catch (e) {
            console.log(e)
        }
    }

    /**
     * Envío de información de error de formulario
     * @param {any} error
     */
    this.eventoErroresFormulario = function(error)
    {

        try {
            window.dataLayer.push({
                'event': 'gg.ga4.trackEvent',
                'eventName': 'user_interaction_error',
                'eventParams': {
                    'error_message': error.mensaje,
                    'error_code': error.codigoError,
                    'error_type': 'form',
                    'form_name': error.formName,
                    'section': error.seccion,
                    'step_name': error.stepName,
                    'step_number': error.stepNumber
                }
            });

        } catch (e) {
            console.log(e);
        }
    }

    /**
     * Editar pedido
     * @param {any} pedido
     */
    this.eventoEditarPedido = function (pedido) {
        var eventoGA4 = {
            'event': 'gg.ga4.trackEvent',
            'eventName': 'begin_checkout',
            'currency': 'MXN',
            'value': pedido.pago[2].cantidad,
            'section': 'checkout',
            'step_name': 'pedido',
            'step_number': 3,
            'store': pedido.tienda.nombre,
            'login_from': 'sin-checkout',
            'items': [
            ]
        }

        angular.forEach(pedido.productos_agregados, function (producto, indiceGrupo) {
            eventoGA4.items.push(MapearProductoShakeShackAProductoGA4("", producto.detalle, producto.totales));
        });

        window.dataLayer.push(productoGA4);

    }

    /**
     * Seleccionar horario de entrega
     * @param {string} fecha
     * @param {date} horarioSeleccionado
     */
    this.eventoSeleccionarHorarioEntrega = function (fecha, horarioSeleccionado) {

        try {
            window.dataLayer.push({
                'event': 'gg.ga4.trackEvent',
                'eventName': 'user_interaction',
                'eventParams': {
                    'action': 'select',
                    'day': fecha,
                    'time': `${horarioSeleccionado.getHours().toString().padStart(2, '0')}:${horarioSeleccionado.getMinutes().toString().padStart(2, '0')}`,
                    'section': 'checkout',
                    'step_name': 'pedido',
                    'step_number': 3
                }
            });

        } catch (e) {
            console.log(e);
        }
    }

    /**
     * Aplicar cupón
     * @param {any} cupon
     */
    this.eventoAplicarCupon = function (cupon) {
        try {
            window.dataLayer.push({
                'event': 'gg.ga4.trackEvent',
                'eventName': 'user_interaction',
                'eventParams': {
                    'action': 'insert',
                    'coupon': cupon,
                    'section': 'checkout',
                    'step_name': 'pedido',
                    'step_number': 3
                }
            });

        } catch (e) {
            console.log(e);
        }
    }

    /**
     * Error al aplicar el cupón
     * @param {any} mensajeError
     * @param {any} codigoError
     * @param {any} cupon
     */
    this.eventoErrorAplicarCupon = function (mensajeError, codigoError, cupon) {
        try {
            window.dataLayer.push({
                'event': 'gg.ga4.trackEvent',
                'eventName': 'user_interaction_error',
                'eventParams': {
                    'error_message': mensajeError,
                    'error_code': codigoError,
                    'error_type': 'coupon',
                    'section': 'checkout',
                    'step_name': 'pedido',
                    'step_number': 3,
                    'coupon': cupon,
               }
            });

        } catch (e) {
            console.log(e)
        }
    }

    /**
     * Pagar
     * @param {object} formaDePago
     */

    this.eventoPagar = function (formaDePago) {
        try {

            var pedido = JSON.parse(localStorage.getItem('pedido'));

            var fechaEntrega = new Date(pedido.fecha_entrega);
            var options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };


            window.dataLayer.push({
                'event': 'gg.ga4.trackEvent',
                'eventName': 'user_interaction',
                'eventParams': {
                    'action': 'pay',
                    'payment_method': formaDePago,
                    'currency': 'MXN',
                    'value': pedido.pago[2]?.cantidad,
                    'tax': pedido.pago[0]?.cantidad,
                    'discount': pedido.pago[3]?.cantidad,
                    'section': 'checkout',
                    'step_name': 'pedido',
                    'step_number': 3,
                    'coupon': pedido.cupones.length > 0 ?  pedido.cupones[0].cupon :'',
                    'day': fechaEntrega.toLocaleDateString("es-MX", options),
                    'time': `${fechaEntrega.getHours().toString().padStart(2, '0')}:${fechaEntrega.getMinutes().toString().padStart(2, '0')}`,
                    'store': pedido.tienda.nombre,
                    'login_from': 'sin-checkout'
                }
            });

        } catch (e) {
            console.log(e);
        }
    }

    /**
     * Compra exitosa
     * @param {object} formaDePago
     */
    this.eventoCompraExitosa = function (formaDePago) {
        try {

            var orden = JSON.parse(localStorage.getItem('pedido'));


            var fechaEntrega = new Date(orden.fecha_entrega);
            var options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };

            var noProductos = 0;

            orden.productos_agregados.forEach(function (producto, index) {
                noProductos += producto.totales.cantidad
            })


            var eventoGA4 = {
                'event': 'gg.ga4.trackEvent',
                'eventName': 'purchase',
                'currency': 'MXN',
                'transaction_id': orden.id,
                'value': orden.pago[2].cantidad, // restar descuentos si es que existen
                'coupon': orden.cupones.length > 0 ? orden.cupones[0].cupon : '',
                'tax': orden.pago[0].cantidad,
                'payment_method': formaDePago,
                'day': fechaEntrega.toLocaleDateString("es-MX", options),
                'time': `${fechaEntrega.getHours().toString().padStart(2, '0')}:${fechaEntrega.getMinutes().toString().padStart(2, '0')}`,
                'discount': orden.pago[3]?.cantidad,
                'quantity': noProductos,
                'store': orden.tienda.nombre,
                'login_from': 'con checkout',
                'items': [
                ]
            }

            angular.forEach(orden.productos_agregados, function (producto, indiceGrupo) {
                eventoGA4.items.push(MapearProductoShakeShackAProductoGA4(producto.categoria, producto.detalle, producto.totales));
            });

            window.dataLayer.push(eventoGA4)

        } catch (e) {
            console.log(e);
        }
    }  
    //////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////
    // #AUTENTICACION

    /**
    * push autenticación
    * @param {string} id
    */
    this.eventoAutenticacion = function (id) {
        window.window.dataLayer.push({
            'event': 'authentication',
            'userId': id
        });
    }
    //////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////
    // #MÉTODOS AXULIARES
    function MapearProductoShakeShackAProductoGA4(categoria, producto, totales) {

        var productoGA4 = {
            'item_id': producto.id_pro_base,
            'item_name': producto.nombre,
            'item_brand': categoria,
            'price': producto.costo,
            'quantity': totales.cantidad,
            'discount': 0.0,
            'item_category1': '',
            'item_category2': '',
            'item_category3': '',
            'item_category4': '',
            'item_category5': '',
        };

        angular.forEach(producto.grupo_opciones, function (grupo, indiceGrupo) {
            angular.forEach(grupo.opciones, function (opcion, indiceOpcion) {
                if (opcion.seleccionado == true) {
                    switch (grupo.id) {
                        case 1:
                        case 2:
                        case 9:
                        case 3:
                            if (grupo.opciones.length > 0) {
                                producto.item_id = opcion.id_pro
                                productoGA4.item_category1 += `${producto.nombre.replace(/\s+/g, '')}${opcion.name.replace(/\s+/g, '')}`
                            }
                            break;
                        case 4:
                            productoGA4.item_category2 += `${opcion.name.replace(/\s+/g, '')}`
                            break;
                        case 5:
                        case 6:
                            productoGA4.item_category3 += `${opcion.name.replace(/\s+/g, '')}`
                            break;
                        case 7:
                            productoGA4.item_category4 += `${opcion.name.replace(/\s+/g, '')},`
                            break;
                        case 8:
                            productoGA4.item_category5 += `${opcion.name.replace(/\s+/g, '')},`
                            break;
                    }
                }
            });

        });

        productoGA4.item_category4 = productoGA4.item_category4.slice(0, productoGA4.item_category4.length - 1);
        productoGA4.item_category5 = productoGA4.item_category5.slice(0, productoGA4.item_category5.length - 1);

        return productoGA4;
    }

    /**
     * Restablecer bandera de revisión de las etqiuetas de errores del formulario
     * */
    this.restablecerEtiquetasDeErrorFormulario = function () {
        $("div[data-ga4revisado='true']").attr('data-ga4revisado', false);
    }

    /**
     * Intervalo para obtener los errores de formulario y enviarlos a 
        google analytics
     * */
    this.establecerIntervaloDeErroresFormulario = function () {


        var that = this;

        this.intervaloDeErrores = setInterval(function () {
            $("div[data-ga4revisado='false']").each(function (indice) {
                if ($(this).css('display') == 'block' && $(this).data('ga4revisado') == false) {

                    // Evento GA4 - Enviar evento de error
                    var datosFormulario = $(this).closest('form').data();
                    that.eventoErroresFormulario
                        ({
                            codigoError: $(this).data('ga4error'),
                            mensaje: errores[`${$(this).data('ga4error')}`],
                            formName: datosFormulario.ga4formname,
                            seccion: datosFormulario.ga4section,
                            stepName: datosFormulario.ga4stepname,
                            stepNumber: datosFormulario.ga4stepnumber
                        });

                    $(this).attr('data-ga4revisado', true);
                }
            })
        }, 10000);
    }

    /**
     * Eliminar intervalo errores de formulario
     * */
    this.eliminarIntervaloErroresFormulario = function () {
        clearInterval(this.intervaloDeErrores);
    }
    //////////////////////////////////////////////////////////////////////////
});;
app.service('$transicion', function
    (
        $state,
        $googleAnalyticsService,
        $rootScope
) {

    /**
     * Transición al formulario de recuperar contraseña y envío del evento de google analytics
     * @param {any} nombreFormulario
     * @param {any} tieneCheckout
     */
    this.transicionRecuperarPassword = function (nombreFormulario, tieneCheckout = false) {
        ///Evento GA4 - Botón seleccionado
        $googleAnalyticsService.eventoBotonSeleccionadoSinCheckout('olvidaste tu contraseña', nombreFormulario);
        $state.go('inicio.recuperar');
    }

    /**
     * Transición al formulario de registro y envío del evento de google analytics
     * @param {any} nombreFormulario
     * @param {any} tieneCheckout
     */
    this.transicionRegistrate = function (nombreFormulario, tieneCheckout = false) {
        ///Evento GA4 - Botón seleccionado
        $googleAnalyticsService.eventoBotonSeleccionadoSinCheckout('registrate', nombreFormulario);
        $state.go('inicio.registro');
    }

    /**
     * Transición al inico de sesión y envío del evento de google analytics
     * @param {any} nombreFormulario
     * @param {any} tieneCheckout
     */
    this.transicionLogin = function (nombreFormulario, tieneCheckout = false) {
        ///Evento GA4 - Botón seleccionado
        $googleAnalyticsService.eventoBotonSeleccionadoSinCheckout('inicia sesión', nombreFormulario);
        $state.go('inicio.login');
    }

    /**
     * Transición a la compra exitosa y envío del evento "purchase" de google analytics
     * @param {any} formaDePago
     */
    this.transicionCompraExistosa = function (formaDePago) {

        try {
            ///Evento GA4 - Compra exitosa
            $googleAnalyticsService.eventoCompraExitosa(formaDePago);

            $state.go('inicio.exitoso', { id: $rootScope.pedido.id });
            localStorage.removeItem('pedido');
            localStorage.removeItem('idPedido');
            $rootScope.actualizar_pedido();
            $rootScope.progress_button_class = false;
        } catch (e) {

            console.log(e)
        }
       
    }
});;
app.service('$checkoutService', function
    (
        $rootScope
    ) {

    ///////////////////////////////////////////////////////////////////////////////////
    // ##PROPIEDADES
    this.mostrarModalPedidoVencido = false;
    this.respuestaError = {};
    ///////////////////////////////////////////////////////////////////////////////////

    /**
     * Mostrar el formulario de completar información
     */
    this.mostarFormularioCompletarInformacion = function () {
        try {

            var pedido = JSON.parse(localStorage.getItem('pedido'));
            if (pedido == null)
                return false;

            return pedido != null && pedido.cliente == null || pedido.cliente.informacion_incompleta;
        } catch (e) {
            console.log(e);
        }
    }
});;
app.service('$pedidoService', function
    (
        $state,
        $rootScope,
        $checkoutService,

        toaster,
        Pedido
    ) {


    //////////////////////////////////////////////////////////////////////////
    // #PROPIEDADES
    this.productosEliminados = null;
    this.procesando = false;
    //////////////////////////////////////////////////////////////////////////

    //////////////////////////////////////////////////////////////////////////
    // #MÉTODOS AUXILIARES

    function restablecerValoresDelPedido(pedido) {
        var pedidoJSON = JSON.stringify(pedido)

        localStorage.removeItem('pedido');
        localStorage.setItem('pedido', pedidoJSON);
        $rootScope.pedido = pedido;
        /*Establecer la cantidad de productos en la bolsa*/
        $rootScope.no_productos = 0;
        pedido.productos_agregados.forEach(function (producto, index) {
            $rootScope.no_productos += producto.totales.cantidad
        });

    }

    function restablecerValoresPorDefecto() {
        localStorage.removeItem('pedido');
        $rootScope.pedido = null;
        $rootScope.checkout_bag = false;
        $rootScope.no_productos = 0;
    }
    //////////////////////////////////////////////////////////////////////////


    //////////////////////////////////////////////////////////////////////////
    // #MÉTODOS
    this.nuevoPedido = function (pedido) {
        console.log('nuevo-pedido');

        //localStorage.setItem('pedido', JSON.stringify(pedido));
        //$rootScope.pedido = pedido;
        //$rootScope.no_productos = 0;
        //JSON.parse(localStorage.getItem('pedido')).productos_agregados.forEach(function (producto, index) {
        //    $rootScope.no_productos += producto.totales.cantidad
        //})
    }


    this.existenProductosVencidos = function () {
        return this.productosEliminados != null;
    }

    /**
     * Establecer en nulo la variable de productos eliminados
     * */
    this.eliminarProductosVencidos = function () {
        this.productosEliminados = null;
    }
   

    /**
     * Pedir nuevamente
     * @param {object} pedido
     * @param {object} productosVencidos
     */
    this.pedirNuevamente = function (pedido, productosVencidos) {

        try {
            restablecerValoresDelPedido(pedido)
            /*Establecer los productos eliminados*/
            if (productosVencidos != null) {
                this.productosEliminados = productosVencidos
                $state.go('inicio.menu', { id: pedido.tienda.id_local })
            }
            else {
                $state.go('inicio.checkout');
            }
        }
        catch {
            $state.go('inicio');
            restablecerValoresPorDefecto();
        }

         
    }


    /**
     * Cancelar pedido
     * */
    this.cancelarPedido = function () {
        try {
            restablecerValoresPorDefecto();
            $state.go('inicio');
        } catch (e) {
            $state.go('inicio');
        }
    }

    /**
     * Actualizar pedido
     * */
    this.actualizarPedido = function () {
        try {
            this.procesando = true;
            var pedido = $rootScope.pedido;
            Pedido.actualizar_pedido({
                id_tienda:pedido.tienda.id_local,
                id_pedido: pedido.id
            }).then((respuestaActualizar) => {

                var nuevoPedido = respuestaActualizar.data;

                Pedido.consultar(nuevoPedido.id_pedido).then((respuestaPedido) => {
                    /*Actualizar pedido*/
                    restablecerValoresDelPedido(respuestaPedido.data)

                    toaster.pop({
                        type: 'success',
                        title: respuestaActualizar.message,
                        body: '',
                        timeout: 3000
                    });

                    $state.go('inicio.menu', { id: pedido.tienda.id_local });

                    this.procesando = false;
                    $checkoutService.mostrarModalPedidoVencido = false;
                }).catch((respuestaError) => {
                    $checkoutService.respuestaError = respuestaError.data;
                    $checkoutService.mostrarModalPedidoVencido = false;

                    this.procesando = false;
                })
             
            }).catch((respuestaError) => {
                $checkoutService.respuestaError = respuestaError.data;
                $checkoutService.mostrarModalPedidoVencido = false;

                this.procesando = false;
            })

        } catch (e) {
            this.procesando = false;
            this.mostrarModalPedidoVencido = false;
            console.log(e);
        }
    }

    /**
     * Actualizar tienda pedido
     * @param {object} response
     * @param {object} productosVencidos
     */
    this.actualizarTiendaPedido = function (response, productosVencidos) {
        try {

            var pedido = response.data;
            restablecerValoresDelPedido(pedido)
            $("#cambio").hide();

            /*Establecer los productos eliminados*/
            if (productosVencidos != null) {
                this.productosEliminados = productosVencidos
            }
            else {

                toaster.pop({
                    type: 'success',
                    title: response.message,
                    body: '',
                    timeout: 3000
                });
            }
        }
        catch {
            $state.go('inicio');
            restablecerValoresPorDefecto();
        }
    }
    //////////////////////////////////////////////////////////////////////////

});;
app.component("checkout", {
    templateUrl: window.location.origin + '/Scripts/app/checkout/checkout.component.html',
    controllerAs: "checkoutCtrl",
    controller:
        function
        (
            scripts,
            utileriasService
        )
        {
            var checkoutCtrl = this;

            checkoutCtrl.$onInit = function () {
                utileriasService.obtenerScript('<metodo-pago>', scripts.stripe)
            };
        }
});
app.component("metodoPago", {
    templateUrl: window.location.origin + '/Scripts/app/forma-pago/forma-pago.component.html?v=456789',
    controllerAs: "metodoPagoCtrl",
    controller: function
        (
            entorno,
            mensajes,

            Me,
            $window,
            $state,
            //bootstrap3ElementModifier,
            $rootScope,
            $timeout,

            Guid,
            ReCaptcha,
            gRecaptcha,

            toaster,
            scripts,

            usuarioProvider,
            checkoutProvider,
            pedidoProvider,
            PedidoApi,

            $googleAnalyticsService,
            $transicion,
            $checkoutService

        ) {
        /*****************************************************************************************/
        // ## MÉTODOS AXULIARES

        /**
         *  Obtner script
         * @param {any} tag
         * @param {any} url
         * @param {any} success
         */
        function getScript(tag, url, success) {
            var tag = tag || 'head';

            var script = document.createElement('script');
            script.src = url;
            script.setAttribute('data-namespace', 'paypal_sdk');
            var head = document.getElementsByTagName(tag)[0],
                done = false;

            // Attach handlers for all browsers
            script.onload = script.onreadystatechange = function () {

                if (!done && (!this.readyState || this.readyState == 'loaded' || this.readyState == 'complete')) {

                    done = true;

                    // callback function provided as param
                    success();

                    script.onload = script.onreadystatechange = null;
                    head.removeChild(script);

                };

            };
            head.appendChild(script);
        };

        /*****************************************************************************************/

  
        /*****************************************************************************************/
        // ## PROPIEDADES

        var that = this;
        var metodoPagoCtrl = this;

        metodoPagoCtrl.tarjeta_seleccionada;
        metodoPagoCtrl.formaDePago = '';
        metodoPagoCtrl.nueva_tarjeta = true;
        metodoPagoCtrl.applePay = false;
        metodoPagoCtrl.tarjetas = []
        /*****************************************************************************************/


        /*****************************************************************************************/
        // ## MÉTODOS

        metodoPagoCtrl.cambioTarjeta = function (tarjeta_seleccionada) {

            checkoutProvider.token_tarjeta = tarjeta_seleccionada;
            metodoPagoCtrl.nueva_tarjeta = tarjeta_seleccionada == null || tarjeta_seleccionada == undefined ? true : false;
        }

        metodoPagoCtrl.invitado = false;

        metodoPagoCtrl.guardarTarjeta = function () {
            checkoutProvider.guardarTarjeta = !checkoutProvider.guardarTarjeta;

        }

        metodoPagoCtrl.elegirFormaDePago = function (forma_de_pago) {

            let respuesta = pedidoProvider.validaPedido();
            if (!respuesta.estatus && respuesta.seccion_pagina === 'horario') {
                checkoutProvider.scrollSeccion(respuesta);
                return;
            }
            $rootScope.mostar_error_seccion = false;
            checkoutProvider.metodo_pago = true;
            metodoPagoCtrl.formaDePago = forma_de_pago;
            checkoutProvider.metodo_pago = true;
        }

        /**--------------------------------------------------------------------------------------*/
        // ## PAGO CON TARJETA

        metodoPagoCtrl.pagar = function () {

            ///Evento GA4 - Pagar
            $googleAnalyticsService.eventoPagar('tarjeta');


            let respuesta = pedidoProvider.validaPedido();
            if (!respuesta.estatus) {
                checkoutProvider.scrollSeccion(respuesta);
                return;
            }

            $rootScope.progress_button_class = true;
            gRecaptcha.initialize({ key: $rootScope.key_reCaptcha });
            gRecaptcha.execute({ action: 'pagar' })
                .then(function (token) {
                    var informacion = {
                        response: token,
                        remoteip: ''
                    }
                    ReCaptcha.confirmar_token(informacion).then(function (response) {
                        if (response.data.score < 0.6) {
                            $rootScope.progress_button_class = false;
                            toaster.pop('error', 'Eres un robot');
                        }
                        else {

                            var myCard = $('#my-card-1');

                            metodoPagoCtrl.pago = {
                                forma_de_pago: "tarjeta",
                                guardar_tarjeta: checkoutProvider.guardarTarjeta,
                                token_tarjeta_paypal: checkoutProvider.token_tarjeta,
                                metodo_pago: {
                                    month: myCard.CardJs('expiryMonth'),
                                    year: myCard.CardJs('expiryYear'),
                                    number: myCard.CardJs('cardNumber'),
                                    name: myCard.CardJs('name'),
                                    cvv: myCard.CardJs('cvc')
                                }
                            }


                            if (checkoutProvider.token_tarjeta != null) {
                                metodoPagoCtrl.pago.metodo_pago = null;
                            }
                            else {
                                if (myCard.CardJs('cardNumber') === "") {
                                    checkoutProvider.scrollSeccion({ estatus: false, seccion_pagina: "metodo_pago", mensaje: "El número de la tarjeta es requerida" });
                                    return;
                                }

                                if (myCard.CardJs('name') === "") {
                                    checkoutProvider.scrollSeccion({ estatus: false, seccion_pagina: "metodo_pago", mensaje: "El nombre del titular es requerido" });
                                    return;
                                }
                                if (myCard.CardJs('expiryYear') === "" || myCard.CardJs('expiryMonth') === "") {
                                    checkoutProvider.scrollSeccion({ estatus: false, seccion_pagina: "metodo_pago", mensaje: "La fecha de expiración es requerida" });
                                    return;
                                }

                                if (myCard.CardJs('cvc') === "") {
                                    checkoutProvider.scrollSeccion({ estatus: false, seccion_pagina: "metodo_pago", mensaje: "El cvc es requerido" });
                                    return;
                                }
                            }

                            PedidoApi.confirmar_pago($rootScope.pedido.id, metodoPagoCtrl.pago).then(
                                (respuesta) => {
                                    if (respuesta.estatus) {

                                        /*
                                        *Transición compra exitosa
                                        */
                                        $transicion.transicionCompraExistosa('tarjeta');

                                    }
                                    else {
                                        checkoutProvider.scrollSeccion({ estatus: false, seccion_pagina: "checkout_info", mensaje: respuesta.message });
                                    }
                                }
                            ).catch((respuesta) => {
                                console.log(respuesta)
                                if (respuesta.data.error != null) {
                                    switch (respuesta.data.error.codigo_error) {
                                        case "001PedidioVencido":
                                            $checkoutService.mostrarModalPedidoVencido = true;
                                            $checkoutService.respuestaError = respuesta.data;                                            
                                            break;
                                        default:

                                            break;
                                    }
                                }
                                else {
                                    checkoutProvider.revisarPedidoPagado();
                                    checkoutProvider.actualizarCheckout();
                                    checkoutProvider.scrollSeccion({ estatus: false, seccion_pagina: "checkout_info", mensaje: respuesta.data.message });

                                }
                             

                           })

                        };


                    }).catch(function (respuesta) {
                        toaster.pop('error', respuesta.message);
                        $rootScope.progress_button_class = false;
                    });
                }).catch(function (respuesta) {
                    toaster.pop('error', "Error al procesar la solicitud");
                })
        }

        /**--------------------------------------------------------------------------------------*/

        /*****************************************************************************************/

    
        /*****************************************************************************************/
        /** MÉTODOS DEL COMPONENTE */

        metodoPagoCtrl.$onInit = function () {

            /*--------------------------------------------------------------- */
            //Variables
            metodoPagoCtrl.model = {};
            metodoPagoCtrl.invitado = usuarioProvider.esInvitado();
            metodoPagoCtrl.progress_button_class = $rootScope.progress_button_class;
            metodoPagoCtrl.genders = ['Male', 'Female', 'Unknown'];
            /*--------------------------------------------------------------- */

            /*--------------------------------------------------------------- */
            // Funciones
            if (!metodoPagoCtrl.invitado) {
                Me.tarjetas().then((respuesta) => {
                    metodoPagoCtrl.tarjetas = respuesta.data;
                }).catch((respuesta) => {

                })
            }

            //bootstrap3ElementModifier.enableValidationStateIcons(true);


            $.ajaxSetup({
                cache: true
            });

            /*****************************************************************************************/
            //## APPLE PAY

            getScript('metodo-pago', scripts.stripe, function () {
                var stripe = Stripe(entorno.stripe, {
                    apiVersion: "2020-08-27",
                });

                checkoutProvider.paymentRequest = stripe.paymentRequest({
                    country: 'MX',
                    currency: 'mxn',
                    total: {
                        label: 'Pedido',
                        amount: JSON.parse(localStorage.getItem('pedido')).pago[2].cantidad * 100,
                    },
                    requestPayerName: true,
                    requestPayerEmail: true,
                });

                var elements = stripe.elements();
                var prButton = elements.create('paymentRequestButton', {
                    paymentRequest: checkoutProvider.paymentRequest,
                });

                // Check the availability of the Payment Request API first.

                checkoutProvider.paymentRequest.canMakePayment().then(function (result) {
                    if (result) {
                        //$("#forma_de_pago_applepay").show();
                        //prButton.mount('#payment-request-button');
                        if (result.applePay === true) {
                            $("#forma_de_pago_applepay").show();
                            prButton.mount('#payment-request-button');
                        }
                    } else {
                        document.getElementById('payment-request-button').style.display = 'none';
                    }
                });

                /***
                 * Pago apple pay
                 * */
                function ProcesarPago() {
                    metodoPagoCtrl.pago = {
                        forma_de_pago: "apple_pay"
                    }

                    ///Evento GA4 - Pagar
                    $googleAnalyticsService.eventoPagar('apple_pay');


                    PedidoApi.confirmar_pago(JSON.parse(localStorage.getItem('pedido')).id, metodoPagoCtrl.pago).then(
                        (respuesta) => {
                            if (respuesta.estatus) {

                                /*
                                 *Transición compra exitosa
                                 */
                                $transicion.transicionCompraExistosa('apple pay');
                            }
                            else {
                                $rootScope.progress_button_class = false;
                                checkoutProvider.scrollSeccion({ estatus: false, seccion_pagina: "checkout_info", mensaje: respuesta.message });
                            }
                        }
                    ).catch((respuesta) => {
                        checkoutProvider.revisarPedidoPagado();
                        checkoutProvider.actualizarCheckout();
                        $rootScope.progress_button_class = false;
                        checkoutProvider.scrollSeccion({ estatus: false, seccion_pagina: "checkout_info", mensaje: respuesta.data.message });
                    })
                }

                checkoutProvider.paymentRequest.on('paymentmethod', function (ev) {
                    $rootScope.progress_button_class = true;

                    // Confirm the PaymentIntent without handling potential next actions (yet).
                    stripe.confirmCardPayment(
                        JSON.parse(localStorage.getItem('pedido')).client_secret,
                        { payment_method: ev.paymentMethod.id },
                        { handleActions: false }
                    ).then(function (confirmResult) {


                        if (confirmResult.error) {
                            ProcesarPago();
                            checkoutProvider.scrollSeccion({ estatus: false, seccion_pagina: "checkout_info", mensaje: mensajes.mensaje_stripe_invalido });
                        } else {
                            // Report to the browser that the confirmation was successful, prompting
                            // it to close the browser payment method collection interface.
                            ev.complete('success');
                            // Check if the PaymentIntent requires any actions and if so let Stripe.js
                            // handle the flow. If using an API version older than "2019-02-11" instead
                            // instead check for: `paymentIntent.status === "requires_source_action"`.
                            if (confirmResult.paymentIntent.status === "requires_action") {
                                // Let Stripe.js handle the rest of the payment flow.
                                stripe.confirmCardPayment(clientSecret).then(function (result) {
                                    if (result.error) {
                                        checkoutProvider.scrollSeccion({ estatus: false, seccion_pagina: "checkout_info", mensaje: mensajes.mensaje_stripe_invalido });

                                        // The payment failed -- ask your customer for a new payment method.
                                    } else {

                                        ProcesarPago();
                                        // The payment has succeeded.
                                    }
                                });
                            } else {
                                ProcesarPago();
                                // The payment has succeeded.
                            }
                        }
                    });
                });
            });

            /*****************************************************************************************/

            /*****************************************************************************************/
            //## PAYPAL

            paypal.Buttons({

                style: {
                    shape: 'pill',
                    label: 'pay'
                },
                // Call your server to set up the transaction
                createOrder: (data, actions) => {
                    ///Evento GA4 - Pagar
                    $googleAnalyticsService.eventoPagar('paypal');


                    let respuesta = pedidoProvider.validaPedido();
                    if (!respuesta.estatus) {
                        checkoutProvider.scrollSeccion(respuesta);
                        return;
                    }

                    checkoutProvider.modal_esperar(true);

                    return fetch('/api/services/paypal/1.0/' + JSON.parse(localStorage.getItem('pedido')).id + '/orden', {
                        method: 'post',
                        headers: {
                            'PayPal-Client-Metadata-Id': checkoutProvider.guidFraudNet,
                            'content-type': 'application/json',
                            'Authorization': `Bearer ${localStorage.getItem('shk_token')}`,
                            'llave-publica': entorno.llave_publica, 
                            'x-pedido' : localStorage.getItem('idPedido')

                        }
                    }).then(function (respuesta) {

                        return respuesta.json();
                    }).then(function (respuesta) {
                        if (respuesta.estatus) {
                            ///Evento GA4 - Pagar
                            $googleAnalyticsService.eventoPagar('paypal');

                            return respuesta.data.id;
                        }
                        else {
                            if (respuesta.error != null) {
                                switch (respuesta.error.codigo_error) {
                                    case "001PedidioVencido":
                                        $checkoutService.mostrarModalPedidoVencido = true;
                                        $checkoutService.respuestaError = respuesta;
                                        break;
                                }
                            }
                            return null
                        }
                    });
                },
                onCancel: (data, actions) => {

                    checkoutProvider.modal_esperar(false);
                },
                onError: (err) => {                    
                    checkoutProvider.revisarPedidoPagado();
                    checkoutProvider.actualizarCheckout();
                    // For example, redirect to a specific error page
                    checkoutProvider.modal_esperar(false);
                    checkoutProvider.scrollSeccion({ estatus: false, seccion_pagina: "checkout_info", mensaje: mensajes.checkout_mensaje_paypal_button_excepcion });
                },
                // Call your server to finalize the transaction
                onApprove: (data, actions) => {

                    return fetch('/api/services/pedido/1.0/' + JSON.parse(localStorage.getItem('pedido')).id + '/confirmar-pago', {
                        method: 'post',
                        headers: {
                            'PayPal-Client-Metadata-Id': checkoutProvider.guidFraudNet,
                            'content-type': 'application/json',
                            'Authorization': `Bearer ${localStorage.getItem('shk_token')}`,
                            'llave-publica': entorno.llave_publica,
                            'x-pedido': localStorage.getItem('idPedido')
                        },
                        body: JSON.stringify({
                            forma_de_pago: 'paypal'
                        })

                    }).then(function (respuesta) {

                        return respuesta.json();
                    }).then(function (respuesta) {
                        $rootScope.progress_button_class = true;

                        if (respuesta.estatus) {
                            /*
                            *Transición compra exitosa
                            */
                            $transicion.transicionCompraExistosa('paypal');
                        }
                        else {
                            checkoutProvider.scrollSeccion({ estatus: false, seccion_pagina: "checkout_info", mensaje: respuesta.message });
                            checkoutProvider.confirmar();
                            //return actions.restart();
                        }
                    });
                }

            }).render('#paypal-button-container');

            /*****************************************************************************************/

            /*--------------------------------------------------------------- */

        };

        metodoPagoCtrl.$onDestroy = function () {

        }
        /*****************************************************************************************/
      
    }
})

;
app.component('modalTienda', {
    controllerAs: "modalTiendaCtrl", 
    templateUrl: window.location.origin + '/Scripts/app/modal-tienda/modal-tienda.component.html',
    controller: function () {
        var modalTiendaCtrl = this;

        modalTiendaCtrl.cerrarModalTienda = function () {
            $("#family-diy-menu").hide();

        }

        modalTiendaCtrl.$onInit = function () {

        }
    },
    bindings: {
        tienda: "@", 
        infotienda : "="
    }
});;
app.component("tarjeta", {
    templateUrl: window.location.origin + '/Scripts/app/tarjeta/tarjeta.component.html',
    controllerAs: "tarjetaCtrl",
    controller: function
        (
            MeApi,
            toaster,
            $rootScope,
            mensajes
        ) {

        var tarjetaCtrl = this;
        /***
         * Variables
         * */
        tarjetaCtrl.mostrar_error = false;
        tarjetaCtrl.mensaje_error = '';
        tarjetaCtrl.progress_button_class = false;


        /***
         * Métodos
         * 
         * */
        tarjetaCtrl.cancelar = () => {
            console.log('cancelar');
            $rootScope.agregar_tarjeta = false;
        }

        tarjetaCtrl.guardarTarjeta = () => {
            var myCard = $('#my-card-1');

            tarjetaCtrl.metodo_pago = {
                month: myCard.CardJs('expiryMonth'),
                year: myCard.CardJs('expiryYear'),
                number: myCard.CardJs('cardNumber'),
                name: myCard.CardJs('name'),
                cvv: myCard.CardJs('cvc')
            }

            if (myCard.CardJs('cardNumber') === "") {
                tarjetaCtrl.mostrar_error = true;
                tarjetaCtrl.mensaje_error =  mensajes.tarjeta_mensaje_no_tarjeta;
                return;
            }

            if (myCard.CardJs('name') === "") {
                tarjetaCtrl.mostrar_error = true;
                tarjetaCtrl.mensaje_error =  mensajes.tarjeta_mensaje_titular;
                return;
            }
            if (myCard.CardJs('expiryYear') === "" || myCard.CardJs('expiryMonth') === "") {
                tarjetaCtrl.mostrar_error = true;
                tarjetaCtrl.mensaje_error = mensajes.tarjeta_mensaje_fecha_vigencia;
                return;
            }

            if (myCard.CardJs('cvc') === "") {
                tarjetaCtrl.mostrar_error = true;
                tarjetaCtrl.mensaje_error = mensajes.tarjeta_mensaje_cvc;
                return;
            }

            tarjetaCtrl.mostrar_error = false;
            tarjetaCtrl.progress_button_class = true;
            MeApi.nueva_tarjeta(tarjetaCtrl.metodo_pago)
                .then((repuesta) => {

                    toaster.pop('success', repuesta.message);
                    $rootScope.agregar_tarjeta = false;
                    tarjetaCtrl.progress_button_class = false;

                })
                .catch((repuesta_error) => {
                    toaster.pop('error', repuesta_error.data.message);
                    tarjetaCtrl.mostrar_error = true;
                    tarjetaCtrl.mensaje_error = repuesta_error.data.message
                    tarjetaCtrl.progress_button_class = false;
                })
        }

        tarjetaCtrl.$onInit = function () {

        };

        tarjetaCtrl.$onDestroy = function () {

        }
    }
})

;
app.component("modalProductoVencido", {
    templateUrl: window.location.origin + '/Scripts/app/modal-producto-vencido/modal-producto-vencido.component.html?123',
    controllerAs: "modalProductoVencidoCtrl",
    controller: function
    (
            $pedidoService

    ) {


        /*****************************************************************************************/
        // ## PROPIEDADES
        var modalProductoVencidoCtrl = this;
        modalProductoVencidoCtrl.pedidoService = $pedidoService;
        /*****************************************************************************************/

        /*****************************************************************************************/
        // ## MÉTODOS
        modalProductoVencidoCtrl.eliminarProductosVencidos = function(){
            $pedidoService.eliminarProductosVencidos();
        }

        /*****************************************************************************************/


        /*****************************************************************************************/
        /** MÉTODOS DEL COMPONENTE */

        modalProductoVencidoCtrl.$onInit = function () {
            
        };

        modalProductoVencidoCtrl.$onDestroy = function () {
            $pedidoService.eliminarProductosVencidos();
        }
        /*****************************************************************************************/

    }
})

;
app.component("modalActualizarPedido", {
    templateUrl: window.location.origin + '/Scripts/app/modal-actualizar-pedido/modal-actualizar-pedido.component.html?123',
    controllerAs: "modalActualizarPedidoCtrl",
    controller: function
        (
            $checkoutService, 
            $pedidoService

        ) {


        /*****************************************************************************************/
        // ## PROPIEDADES
        var modalActualizarPedidoCtrl = this;
        modalActualizarPedidoCtrl.checkoutService = $checkoutService;
        modalActualizarPedidoCtrl.pedidoService = $pedidoService;
        /*****************************************************************************************/

        /*****************************************************************************************/
        // ## MÉTODOS
        modalActualizarPedidoCtrl.actualizarPedido = function () {
            $pedidoService.actualizarPedido();
        }


        modalActualizarPedidoCtrl.cancelarPedido = function () {
            $pedidoService.cancelarPedido();
        }


        /*****************************************************************************************/


        /*****************************************************************************************/
        /** MÉTODOS DEL COMPONENTE */

        modalActualizarPedidoCtrl.$onInit = function () {

        };

        modalActualizarPedidoCtrl.$onDestroy = function () {
            modalActualizarPedidoCtrl
        }
        /*****************************************************************************************/

    }
})

;
angular.module('shakeshack')
    .controller('LoginCtrl',
        [
            '$window',
            'usuarioProvider',
            '$scope',
            '$location',
            '$auth',
            'toaster',
            '$state',
            'Pedido',
            'Me',
            '$rootScope',
            'gRecaptcha',
            'ReCaptcha',
            '$googleAnalyticsService',
            '$transicion',
            function
                (
                    $window,
                    usuarioProvider,
                    $scope,
                    $location,
                    $auth,
                    toaster,
                    $state,
                    Pedido,
                    Me,
                    $rootScope,
                    gRecaptcha,
                    ReCaptcha,
                    $googleAnalyticsService,
                    $transicion
                ) {
                gRecaptcha.initialize({ key: $rootScope.key_reCaptcha }) // returns a promise

                /////////////////////////////////////////////////////////////////
                // #PROPIEDADES  
                $scope.transicion = $transicion;
                $scope.show_progress = false;
                $scope.error = false;
                $scope.mensaje_error = '';
                $scope.user = {
                    grant_type: "password",
                    username: "",
                    password: ""
                };
                var options = {
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Authorization': 'Basic d2ViOjRiNWU1N2Y2ZWIyZjQyYjkwMzliM2QxZTEzOTI5Mjk1ZjIzMTc0OWM1MTBjYmUzNDFjZDY4MDM2ZDlhZjk3ZTI='
                    }
                };
                /////////////////////////////////////////////////////////////////

                /////////////////////////////////////////////////////////////////
                // #MÉTODOS  
                function actualizar_informacion_usuario(tipo_inicio_sesion) {
                    if (localStorage.getItem('pedido') != null) {
                        Pedido.asociar_usuario($rootScope.pedido.id)
                            .then(function () {
                                Pedido.consultar($rootScope.pedido.id)
                                    .then(function (response) {
                                        localStorage.setItem('pedido', JSON.stringify(response.data));
                                        $rootScope.actualizar_variables();
                                    });
                            })
                    }

                    Me.informacion().then(function (response) {
                        localStorage.setItem('es_mayor', response.data.contacto.es_mayor);

                    })
                        .catch(function (error) {
                        })


                }

                $scope.login = function () {

                    ///Evento GA4 - Botón seleccionado
                    $googleAnalyticsService.eventoBotonSeleccionadoSinCheckout('iniciar sesión', 'iniciar sesion sin checkout');

                    gRecaptcha.execute({ action: 'login' })
                        .then(function (token) {
                            var informacion = {
                                response: token,
                                remoteip: ''
                            }
                            ReCaptcha.confirmar_token(informacion).then(function (response) {
                                if (response.data.score < 0.6)
                                    toaster.pop('error', 'Eres un robot');
                                else {
                                    $('#login').attr('disabled', true);
                                    $scope.show_progress = true;
                                    $auth.login("grant_type=password" + "&username=" + encodeURIComponent($scope.user.username) + "&password=" + encodeURIComponent($scope.user.password), options)
                                        .then(function (response) {

                                            ///Evento GA4 - Envió de información formulario
                                            $googleAnalyticsService.eventoEnvioInformacionFormulario('login', 'normal');


                                            toaster.pop({
                                                type: 'success',
                                                title: '¡Has iniciado sesión correctamente!',
                                                body: '',
                                                timeout: 3000
                                            });

                                            localStorage.setItem('info_token', JSON.stringify(response.data.data));
                                            localStorage.setItem('id', response.data.data.id_shakeshack);
                                            $auth.setToken(response.data.data.access_token);
                                            usuarioProvider.invitado = false;

                                            //save token to local storage, essentially signs you in
                                            $('#login').attr('disabled', false);

                                            actualizar_informacion_usuario('email');

                                            $state.go($rootScope.estado_anterior);
                                        })
                                        .catch(function (response) {
                                            $scope.show_progress = false;
                                            $('#login').attr('disabled', false);
                                            console.log(response);
                                            switch (response.status) {
                                                case 400:
                                                    $scope.mensaje_error = response.data.message;
                                                    $scope.error = true;
                                                    break;
                                                case 500:
                                                    toaster.error("Error", "Ocurrió algo inesperado");
                                                    break;
                                            }
                                        });

                                }
                            }).catch(function () {

                            });
                        });

                };


                $scope.authenticate = function (provider) {

                    ///Evento GA4 - Botón seleccionado
                    $googleAnalyticsService.eventoBotonSeleccionadoSinCheckout(provider, 'iniciar sesion sin checkout');

                    gRecaptcha.execute({ action: 'authenticate' })
                        .then(function (token) {
                            var informacion = {
                                response: token,
                                remoteip: ''
                            }
                            ReCaptcha.confirmar_token(informacion).then(function (response) {
                                if (response.data.score < 0.6)
                                    toaster.pop('error', 'Eres un robot');
                                else {

                                    $('#login').attr('disabled', true);
                                    $scope.show_progress = true;
                                    $auth.authenticate(provider)
                                        .then(function (response) {

                                            ///Evento GA4 - Envió de información formulario
                                            $googleAnalyticsService.eventoEnvioInformacionFormulario('login', provider);

                                            toaster.pop({
                                                type: 'success',
                                                title: '!Has iniciado sesión correctamente!',
                                                body: '',
                                                timeout: 3000
                                            });



                                            usuarioProvider.invitado = false;
                                            $('#login').attr('disabled', false);
                                            $auth.setToken(response.data.access_token); //save token to local storage, essentially signs you in
                                            localStorage.setItem('info_token', JSON.stringify(response.data));
                                            localStorage.setItem('id', response.data.id_shakeshack);
                                            actualizar_informacion_usuario(provider);
                                            $state.go($rootScope.estado_anterior);
                                        })
                                        .catch(function (error) {
                                            $('#login').attr('disabled', false);
                                            $scope.show_progress = false;
                                            switch (error.status) {
                                                case 400:
                                                    $scope.error = true;

                                                    break;
                                                case 500:
                                                    toaster.error("Error", error.data.error_description);
                                                    break;
                                            }

                                        });
                                }
                            }).catch(function () {

                            });
                        });
                };
                /////////////////////////////////////////////////////////////////

            }]);;
angular.module("shakeshack")
    .controller('OrdenCtrl', ['$scope', '$state', '$stateParams', 'Tienda', 'Orden', 'toaster', '$rootScope', function ($scope, $state, $stateParams, Tienda, Orden, toaster, $rootScope) {


        init();

        $scope.regresar_menu = function (id_tienda) {
            $rootScope.checkout_bag = true;
            $state.go('inicio.menu', {id:id_tienda})
        }

        function init() {
            Orden.consultar_orden($stateParams.id)
                .then(function (response)
                {
                    $scope.orden = response.data;
                })
                .catch(function () {
                    $rootScope.checkout_bag = true;
                    $state.go('inicio');                 
                })
        }

        //////////////////variables



        ///////////////////////////

        ///////////Function////////////
        
        /////////////////////////////


        /////scope function ////////////////
        ////////////////////////////////////////

    }]);;
angular.module("shakeshack")
    .factory('Tienda', ['$http', function ($http) {
        return {
            /**
             * Consultar horarios de tienda
             * @param {number} idTienda
             */
            horarios: function (idTienda) {
                var oPromise = $http.get(`/api/services/tienda/1.0/horarios/${idTienda}`).then(function (response) {
                    return response.data;
                });
                return oPromise;
            },

            todas: function () {
                var oPromise = $http.get('/api/services/tienda/1.0/todas').then(function (response) {
                    return response.data;
                });
                return oPromise;
            },

            banners: function () {
                var oPromise = $http.get(`/api/services/banner/1.0/web/`).then(function (response) {
                    return response.data;
                });
                return oPromise;
            },
            cercanas: function (latitud, longitud) {
                var oPromise = $http.get
                    (
                        '/api/services/tienda/1.0/tiendas-cercanas',
                        { params: { latitud: latitud, longitud: longitud } }
                    ).then(function (response) {
                        return response.data;
                    });
                return oPromise;
            },
            buscar: function (busqueda) {
                var oPromise = $http.get
                    (
                        '/api/services/tienda/1.0/buscar-por-radio',
                        {
                            params: {
                                cp: busqueda.cp,
                                radio: busqueda.radio
                            }
                        }
                    ).then(function (response) {
                        return response.data;
                    });
                return oPromise;
            },
            consultar_tienda: function (id_tienda) {
                var oPromise = $http.get
                    (
                        '/api/services/tienda/1.0/' + id_tienda
                    ).then(function (response) {
                        return response.data;
                    });
                return oPromise;
            },
            menu: function (id) {
                var oPromise = $http.get
                    (
                        '/api/services/tienda/1.0/menu/' + id + '?id_cliente=web'
                    ).then(function (response) {
                        return response.data;
                    });
                return oPromise;
            },
            horarios_entrega: function (id, timezone) {
                var oPromise = $http.get
                    (
                        '/api/services/tienda/1.0/tiempo-entrega/' + id + '?timezone=' + timezone
                    ).then(function (response) {
                        return response.data;
                    });
                return oPromise;
            },
            horarios_entrega_V110: function (id, timezone, idPedido) {
                var oPromise = $http.get
                    (
                        '/api/services/tienda/1.1/tiempo-entrega/' + id + '?id_pedido=' + idPedido + '&timezone=' + timezone

                    ).then(function (response) {
                        return response.data;
                    });
                return oPromise;
            }
        }
    }]);
;
angular.module("shakeshack")
    .controller('TiendaCtrl',
        [
            '$scope',
            '$state',
            '$stateParams',
            'Tienda',
            '$rootScope',
            '$timeout',
            '$googleAnalyticsService',
            function (
                $scope,
                $state,
                $stateParams,
                Tienda,
                $rootScope,
                $timeout,
                $googleAnalyticsService
            ) {

                /////////////////////////////////////////////////////////
                // #PROPIEDADES
                var activeWindow;
                var activeWindow2;

                $scope.buscar = false;
                $scope.no_encontrado = false;
                $scope.ubicaciones = true;
                $scope.latitud = 0;
                $scope.longitud = 0;
                $scope.marcador_posicion_actual;
                $scope.cp = '';
                $scope.total = 0;
                $scope.busqueda = {
                    texto: ""
                };

                $scope.opcion_seleccionada;

                $scope.data = {
                    opciones: []
                };
                /////////////////////////////////////////////////////////


                ///////////////////////////////////////////////////////////////////////////////////////////////////////
                // #MÉTODOS

                $scope.localizacion = function () {
                    navigator.geolocation.getCurrentPosition(posicion, error, { enableHighAccuracy: true });
                }

                $scope.init = function () {

                    var googleMapOption = {
                        zoom: 12,
                        center: new google.maps.LatLng(19.432608, -99.133209),
                        mapTypeId: google.maps.MapTypeId.roadmap
                    };


                    $scope.gMap2 = new google.maps.Map(document.getElementById('map2'), googleMapOption);

                    $scope.gMap = new google.maps.Map(document.getElementById('map'), googleMapOption);
                    $scope.bounds = new google.maps.LatLngBounds();
                    $scope.bounds2 = new google.maps.LatLngBounds();

                }
                $scope.init();
                navigator.geolocation.getCurrentPosition(posicion, error, { enableHighAccuracy: true });

                Array.prototype.groupBy = function (prop) {
                    return this.reduce(function (groups, item) {
                        const val = item[prop]
                        groups[val] = groups[val] || []
                        groups[val].push(item)
                        return groups
                    }, {})
                }

                function marker(tienda) {


                    var tiendaInfo = new google.maps.Marker({
                        map: $scope.gMap,
                        position: new google.maps.LatLng(tienda.latitud, tienda.longitud),
                        title: tienda.nombre

                    });

                    var tiendaInfo2 = new google.maps.Marker({
                        map: $scope.gMap2,
                        position: new google.maps.LatLng(tienda.latitud, tienda.longitud),
                        title: tienda.nombre

                    });

                    $scope.bounds.extend(new google.maps.LatLng(tiendaInfo.position.lat(), tiendaInfo.position.lng()))
                    $scope.bounds2.extend(new google.maps.LatLng(tiendaInfo2.position.lat(), tiendaInfo2.position.lng()))

                    const contentString =
                        '<div rel="">' +
                        '<div class="shack-toolt-info">' +
                        '<h1>' + tienda.nombre + '</h1>' +
                        '<span>' + tienda.direccion + '</span><br />' +
                        '</div>' +
                        '   <a href="#!/menu/' + tienda.id_local + '" class="btn btn-ss btn-md mt-4">Comenzar pedido</a>' +
                        '</div>';
                    const infowindow = new google.maps.InfoWindow({
                        content: contentString
                    });

                    const infowindow2 = new google.maps.InfoWindow({
                        content: contentString
                    });

                    tiendaInfo.setIcon('https://ordena.shakeshack.com.mx/Assets/map_icon_active.png');
                    tiendaInfo2.setIcon('https://ordena.shakeshack.com.mx/Assets/map_icon_active.png');


                    //marker.addListener("click", () => {
                    //    infowindow.open($scope.gMap, tiendaInfo);
                    //});

                    google.maps.event.addListener(tiendaInfo, 'click', function () {
                        infowindow.setContent(contentString);
                        if (activeWindow != null) activeWindow.close();

                        infowindow.open($scope.gMap, tiendaInfo);
                        infowindow.open($scope.gMap2, tiendaInfo);

                        activeWindow = infowindow;

                    });

                    google.maps.event.addListener(tiendaInfo2, 'click', function () {
                        infowindow2.setContent(contentString);
                        if (activeWindow2 != null) activeWindow2.close();

                        infowindow2.open($scope.gMap2, tiendaInfo2);

                        activeWindow2 = infowindow2;

                    });
                }

                function error(err) {
                    switch (err.code) {
                        case 0: alert("Error desconocido"); break
                        case 1: alert("Permiso de ubicación denegado"); break;
                        case 2: alert("La posición no puede ser determinada"); break;
                        case 3: alert("Tiempo de espera vencido"); break;
                    }
                    $timeout(() => {
                        $rootScope.todas = true;
                    });
                }

                /**
                 * Redirigir al menú de la tienda y registrar el evento GA4
                 * @param {any} idTienda
                 */
                $scope.comenzarPedido = function (idTienda) {
                    $state.go('inicio.menu', { id: idTienda });

                    ///Evento GA4 - Comenzar pedido
                    $googleAnalyticsService.eventoComenzarPedido(idTienda);
                }

                /**
                 * Selección de rango
                 * @param {number} opcion
                 */
                $scope.cambio_rango = function (opcion) {
                    $scope.search(opcion.radio);

                    ///Evento GA4 - Seleccionar rango
                    $googleAnalyticsService.eventoSeleccionRangos(opcion);

                }

                /**
                 * Buscar tiendas por código postal o por el radio en metros
                 * @param {number} radio
                 */
                $scope.search = function (radio) {
                    $rootScope.stateLoading = true;
                    $scope.cercanas = false;
                    $scope.cp = $scope.busqueda.texto;

                    var buscar_tiendas = {
                        radio: radio,
                        cp: $scope.busqueda.texto
                    }

                    ///Evento GA4 - Buscar por cp
                    $googleAnalyticsService.eventoBuscarPorCP($scope.busqueda.texto);

                    //Wallia Api - buscar tiendas 
                    Tienda.buscar(buscar_tiendas)
                        .then(function (response) {

                            if (response.data.tiendas.length >= 1) {
                                $scope.data.opciones = response.data.radios;
                                $scope.result_busqueda = response.data.tiendas;

                                $scope.total = response.data.tiendas.length;

                                $scope.buscar = true;
                                $scope.no_encontrado = false;
                                $scope.ubicaciones = true;
                                $state.go('inicio.buscar-tiendas')

                                /**************google maps*/
                                $scope.init();
                                $scope.cercanas = false;
                                response.data.tiendas.forEach(function (tienda) {
                                    marker(tienda);
                                })
                                $scope.gMap.fitBounds($scope.bounds);
                                $scope.gMap.panToBounds($scope.bounds);

                                if (response.data.tiendas.length == 1) {
                                    $scope.gMap2.fitBounds($scope.bounds2);
                                    $scope.gMap2.panToBounds($scope.bounds2);
                                    google.maps.event.addListenerOnce($scope.gMap, 'bounds_changed', function (event) {
                                        if (this.getZoom()) {
                                            this.setZoom(16);
                                        }
                                    });

                                    google.maps.event.addListenerOnce($scope.gMap2, 'bounds_changed', function (event) {
                                        if (this.getZoom()) {
                                            this.setZoom(16);
                                        }
                                    });
                                }
                                else {
                                    $scope.gMap2.fitBounds($scope.bounds2);
                                    $scope.gMap2.panToBounds($scope.bounds2);
                                }
                                /**************************/
                            }

                            else {
                                $scope.init();
                                $scope.ubicaciones = true;
                                $scope.no_encontrado = true;
                                $scope.buscar = false;

                            }

                            $rootScope.stateLoading = false;
                        }).catch(function () {
                            $rootScope.stateLoading = false;
                        });

                };

                function posicion(pos) {
                    $rootScope.stateLoading = true;

                    $scope.longitud = pos.coords.longitude;
                    $scope.latitud = pos.coords.latitude;

                    Tienda.cercanas(pos.coords.latitude, pos.coords.longitude).then(function (response) {
                        $scope.init();

                        $scope.tiendas_cercanas = response.data;
                        $scope.cercanas = response.data.length > 0
                        $rootScope.stateLoading = false;

                        if (response.data.length > 0) {
                            $scope.no_encontrado = false;
                            response.data.forEach(function (tienda) {
                                marker(tienda);
                            })
                            $scope.gMap.fitBounds($scope.bounds);
                            $scope.gMap.panToBounds($scope.bounds);
                            if (response.data.length == 1) {
                                $scope.gMap2.fitBounds($scope.bounds2);
                                $scope.gMap2.panToBounds($scope.bounds2);
                                google.maps.event.addListenerOnce($scope.gMap, 'bounds_changed', function (event) {
                                    if (this.getZoom()) {
                                        this.setZoom(16);
                                    }
                                });

                                google.maps.event.addListenerOnce($scope.gMap2, 'bounds_changed', function (event) {
                                    if (this.getZoom()) {
                                        this.setZoom(16);
                                    }
                                });
                            }
                            else {
                                $scope.gMap2.fitBounds($scope.bounds2);
                                $scope.gMap2.panToBounds($scope.bounds2);
                            }


                        }
                        else {
                            $scope.no_encontrado = true;


                        }

                    }).catch(function (response) {
                        $rootScope.todas = true;
                        $rootScope.stateLoading = false;
                    });
                }


                $scope.agregrar_tienda = function (id) {
                    Me.agregar_tienda($auth.getToken(), id)
                        .then(function () {
                            $scope.show_star = true;
                        })
                        .catch(function () {

                        });
                }

                $scope.tiendas = function () {
                    $rootScope.stateLoading = true;
                    $scope.buscar = false;

                    Tienda.todas().then(function (response) {
                        $scope.all = response.data;
                        var grupos = response.data.groupBy('estado');
                        $scope.estados = Object.keys(grupos);
                        $state.go('inicio.tiendas');
                        $scope.ubicaciones = false;
                        $scope.no_encontrado = false;
                        $scope.todas = true;
                        $scope.cercanas = false;
                        $scope.init();

                        response.data.forEach(function (tienda) {
                            marker(tienda);
                        })


                        $scope.gMap.fitBounds($scope.bounds);
                        $scope.gMap.panToBounds($scope.bounds);
                        $scope.gMap2.fitBounds($scope.bounds2);
                        $scope.gMap2.panToBounds($scope.bounds2);

                    }).catch(function () {
                        $scope.no_encontrado = true;
                        $scope.todas = false;
                        $rootScope.stateLoading = false;

                    });
                }

                this.$onInit = function () {
                }

                ///////////////////////////////////////////////////////////////////////////////////////////////////////
            }]);;
angular.module("shakeshack")
    .controller('MenuCtrl',
        [
            '$scope',
            'MenuApi',
            '$state',
            '$stateParams',
            'Tienda',
            'Pedido',
            'toaster',
            '$rootScope',
            '$googleAnalyticsService',
            '$pedidoService',
            function (
                $scope,
                MenuApi,
                $state,
                $stateParams,
                Tienda,
                Pedido,
                toaster,
                $rootScope,
                $googleAnalyticsService,
                $pedidoService
            )
            {

                ///////////////////////////////////////////////////////////////////////
                // #PROPIEDADES
                
                $scope.pedidoService = $pedidoService;
                $scope.procesando = false;
                $scope.progressbar = true;
                $scope.id_tienda = 0;
                $scope.info_tienda = {};
                $scope.menu = null;
                $scope.producto_ = {};
                $scope.totales_ = {};
                $scope.tipoBanner = 'estatico';
                $scope.banners = [];
                /////////////////////////////////////////////////////////////////////

                /////////////////////////////////////////////////////////////////////

                /*
                 * Evento stop scroll
                 * **/
                $(window).scroll(function () {
                    clearTimeout($.data(this, 'scrollTimer'));
                    $.data(this, 'scrollTimer', setTimeout(
                        /**
                         * La función obtiene los productos mostrados completamente en la pantalla del usuario, 
                         * utilizando el método getBoundingClientRect y la propiedad innerHeight, una vez obtenido 
                         * los productos se obtiene la información del producto y se agrega a la propiedad de 
                         * tipo arreglo productosGA4.                          
                         * */
                        function () {

                        if ($scope.menu != null) {
                            var productos = $("button[data-ga='producto']");
                            var categorias = $scope.menu;
                            angular.forEach(categorias, function (categoria) {
                                categoria.productosGA4 = [];
                            });

                            angular.forEach(productos, function (producto, indiceGrupo) {

                                var position = producto.getBoundingClientRect();

                                if (position.top >= 0 && position.bottom <= window.innerHeight) {

                                    var productoId = producto.getAttribute("data-ga-producto");
                                    angular.forEach(categorias, function (categoria, indiceCategoria) {

                                        angular.forEach(categoria.productos, function (producto, indiceProducto) {

                                            if (producto.id_pro_base === productoId) {
                                                categoria.productosGA4.push(producto)
                                            }
                                        });

                                    });
                                }

                            });

                            ///Evento GA4 - Scroll
                            $googleAnalyticsService.eventoScroll(categorias);

                        }

                    }, 250))
                });

              
                /**
                 * Seleccionar categoría
                 * @param {object} categoria
                 */
                $scope.seleccionarCategoria = function (categoria) {

                    ///Evento GA4 - Seleccionar categoría
                    $googleAnalyticsService.eventoSeleccionCategoria(categoria);
                }

                /**
                 * Seleccionar producto
                 * @param {object} categoria
                 * @param {object} producto
                 */
                $scope.seleccionarProducto = function (categoria, producto) {

                    ///Evento GA4 - Seleccionar producto
                    $googleAnalyticsService.eventoSeleccionarProducto(categoria, producto);

                }

                $scope.mostrar_modal_producto = function (id_pro_base) {
                    MenuApi.producto(id_pro_base, $scope.id_tienda)
                        .then(function (response) {
                            if (response.estatus == 1) {
                                $scope.totales_ = {
                                    costo: 0,
                                    calorias: 0,
                                    cantidad: 1,
                                    total: 0
                                };
                                $scope.producto_ = response.data;
                                $("#modal_producto").show();

                            }
                        })
                        .catch(function () {
                        })
                }
           
                $scope.cerrar_modal = function () {
                    $("#cambio").hide();
                }

                $scope.ver_informacion_tienda = function () {
                    $("#family-diy-menu").show();

                }

                $scope.cerrar_informacion_tienda = function () {
                    $("#family-diy-menu").hide();
                }

                $scope.no_actualizar = function () {
                    $("#cambio").hide();
                }

                $scope.requiere_ser_mayor = function (mayor) {
                    if (mayor) {
                        return $rootScope.es_mayor;
                    } else {
                        return true;
                    }
                }

                $scope.actualizar_orden = function (id_tienda) {
                    $scope.procesando = true;
                    Pedido.actualizar_tienda(JSON.parse(localStorage.getItem('pedido')).id, parseInt(id_tienda))
                        .then(function (response) {

                            $pedidoService.actualizarTiendaPedido(response, null);
                            $scope.procesando = false;

                            //Pedido.consultar(response.data.id_pedido).then(function (response) {
                            //    localStorage.removeItem('pedido');
                            //    localStorage.setItem('pedido', JSON.stringify(response.data));
                            //    $rootScope.pedido = response.data;
                            //    $rootScope.no_productos = 0;
                            //    JSON.parse(localStorage.getItem('pedido')).productos_agregados.forEach(function (producto, index) {
                            //        $rootScope.no_productos += producto.totales.cantidad
                            //    })
                            //    $("#cambio").hide();
                            //    toaster.pop({
                            //        type: 'success',
                            //        title: 'Se actulizo correctamente el pedido',
                            //        body: '',
                            //        timeout: 3000
                            //    });

                            //})

                        })
                        .catch(function (response) {
                            $scope.procesando = false;

                            switch (response.status) {
                                case 400:
                                    $pedidoService.actualizarTiendaPedido(response.data, response.data.error.data);
                                    break;
                                case 500:
                                    toaster.error("Error", response.data.message);
                                    break;
                            }
                        })
                }

                this.$onInit = function ()
                {
                    $scope.es_mayor = localStorage.getItem("es_mayor") ? localStorage.getItem("es_mayor") : false;
                    $scope.isLoggedIn = Boolean(localStorage.getItem('info_token'));
                    $scope.id_tienda = $stateParams.id;
                    if ($scope.id_tienda != '') {


                        Tienda.banners().then(function (response) {

                            $scope.tipoBanner = response.data[0].clave_tipo_banner;
                            $scope.banners = response.data;
                     
                    


                        }).catch(function () {
                        });
                        Tienda.horarios($stateParams.id).then(function (response) {
                            $scope.info_tienda = response.data[0]
                            $scope.indiceDiaDeLaSemana = ObtenerIndiceDiaDeLaSemana();

                            Tienda.menu($stateParams.id).then(function (response) {
                                $scope.menu = response.data;
                                $scope.categorias = response.data;
                                if (localStorage.getItem('pedido') != null && JSON.parse(localStorage.getItem('pedido')).tienda.id_local != parseInt($stateParams.id)) {
                                    $("#cambio").show();
                                }

                                var owl = $('.owl-carousel');
                                owl.owlCarousel({
                                    items: 1,
                                    loop: true,
                                    margin: 10,
                                    autoplay: true,
                                    autoplayTimeout: 10000,
                                    autoplayHoverPause: true
                                });

                            }).catch(function () {
                                $state.go("inicio");
                            });

                        }).catch(function () {
                            $state.go("inicio");
                        });
                    }
                    else {
                        $state.go("inicio");
                    }
                    
                }

                $scope.hide_progress = function () {
                    $scope.progressbar = false;

                };

                /////////////////////////////////////////////////////////////////////////////

                // #MÉTODOS AUXILIARES

                function ObtenerIndiceDiaDeLaSemana() {
                    var horaActual = moment();

                    switch (horaActual.format('dddd')) {

                        case 'Monday':
                            return 0;
                        case 'Tuesday':
                            return 1;
                        case 'Wensday':
                            return 2;
                        case 'Thursday':
                            return 3;
                        case 'Friday':
                            return 4;
                        case 'Saturday':
                            return 5;
                        case 'Sunday':
                            return 6;
                    }
                }

                /////////////////////////////////////////////////////////////////////////////
    }]);
  
;
angular.module("shakeshack")
    .factory('Usuario', ['$http', function ($http) {
        return {
           
            recuperarMethod: function (correo) {
                var oPromise = $http.post
                    (
                        '/api/services/usuario/1.0/recuperar-password',
                        {  correo:correo }
                    ).then(function (response) {
                        return response.data;
                    });
                return oPromise;
            }
        }
    }]);;
angular.module('shakeshack')
    .controller('UsuarioCtrl',
        function (
            Usuario,
            usuarioProvider,
            Pedido,
            $scope,
            $rootScope,
            $modal,
            $location,
            $auth,
            toaster,
            Me,
            $state,
            gRecaptcha,
            ReCaptcha,
            $googleAnalyticsService,
            $transicion
        ) {
            //function (Usuario, Pedido, $scope, $rootScope,$location, $auth, toaster, Me, $state, gRecaptcha, ReCaptcha) {
            gRecaptcha.initialize({ key: $rootScope.key_reCaptcha }) // returns a promise

            /////////////////////////////////////////////////////////////////////////////
            // #PROPIEDADES
            $scope.transicion = $transicion;
            $scope.error = false;
            $scope.error_message = '';
            $scope.show_progress = false;
            $scope.user = {
                grant_type: "password",
                username: "",
                password: ""
            };
            $scope.correo_recuperar = '';
            $scope.registro_usuario = {
                nombre: '',
                materno: '',
                paterno: '',
                fecha_nacimiento: '',
                telefono: '',
                correo: '',
                password: '',
                terminos: ''
            };
            /////////////////////////////////////////////////////////////////////////////

            /////////////////////////////////////////////////////////////////////////////
            // #MÉTODOS
            $scope.AbrirTerminosYCondiciones = function () {
                var res = $modal.open({
                    component: 'modalTerminosCondiciones',
                    resolve: {
                        name: function () {
                            return $scope.name;
                        }
                    }
                })

                res.then(val => {
                    //alert(val)
                })
            }

            $scope.recuperar_password = function () {

                ///Evento GA4 - Botón seleccionado
                $googleAnalyticsService.eventoBotonSeleccionadoSinCheckout('recuperar contraseña', 'recuperar contraseña');

                gRecaptcha.execute({ action: 'recuperar_password' })
                    .then(function (token) {
                        var informacion = {
                            response: token,
                            remoteip: ''
                        }
                        ReCaptcha.confirmar_token(informacion).then(function (response) {
                            if (response.data.score < 0.6)
                                toaster.pop('error', 'Eres un robot');
                            else {
                                $('#recuperar').attr('disabled', true);
                                $scope.show_progress = true;
                                Usuario.recuperarMethod($scope.correo_recuperar)
                                    .then(function () {
                                        $scope.correo_recuperar = '';
                                        $scope.error = false;

                                        toaster.pop({
                                            type: 'success',
                                            title: 'Se actualizó correctamente la contraseña. Enviamos un mensaje a tu correo',
                                            body: '',
                                            timeout: 3000
                                        });

                                        ///Evento GA4 - Envió de información formulario
                                        $googleAnalyticsService.eventoEnvioInformacionFormulario('recuperar_contraseña', 'form');


                                        $state.go('inicio.login');
                                    }).catch(function (error) {
                                        $('#recuperar').attr('disabled', false);
                                        $scope.show_progress = false;

                                        switch (error.status) {

                                            case 400:
                                                $scope.error = true;
                                                $scope.error_message = error.data.message
                                                break;
                                            case 500:

                                                toaster.error("Error", error.data.message);

                                                break;

                                        }
                                    });

                            }
                        }).catch(function () {

                        });
                    });

            }

            $scope.actualizar_informacion_usuario = function () {
                if (localStorage.getItem('pedido') != null) {
                    Pedido.asociar_usuario($rootScope.pedido.id)
                        .then(function () {
                            Pedido.consultar($rootScope.pedido.id)
                                .then(function (response) {

                                    localStorage.setItem('pedido', JSON.stringify(response.data));
                                    $rootScope.actualizar_variables();
                                });
                        })

                    /*  var pedido_viejo = {
                          id_pedido_viejo: JSON.parse(localStorage.getItem('pedido')).id,
                          timezone: "UTC" + moment().format('Z')
                      }
                      Pedido.merge(pedido_viejo).then(function (response) {
                          localStorage.removeItem('pedido');
                          localStorage.setItem('pedido', JSON.stringify(response.data));
                          $rootScope.actualizar_pedido();
                      }).catch(function () {
                          switch (response.status) {
                              case 400:
                                  toaster.warning("Error", response.data.error_description);
    
                                  break;
                              case 500:
                                  toaster.error("Error", response.data.error_description);
    
                                  break;
    
                          }
                      })*/
                }
                Me.informacion().then(function (response) {
                    localStorage.setItem('es_mayor', response.data.contacto.es_mayor);
                })
                    .catch(function (error) {
                    })

            }

            $scope.registar = function () {

                ///Evento GA4 - Botón seleccionado
                $googleAnalyticsService.eventoBotonSeleccionado('registrarme', 'registro sin checkout');


                $('#registrar').attr('disabled', true);
                $scope.show_progress = true;

                gRecaptcha.execute({ action: 'registro_usuario' })
                    .then(function (token) {
                        var informacion = {
                            response: token,
                            remoteip: ''
                        }
                        ReCaptcha.confirmar_token(informacion).then(function (response) {
                            if (response.data.score < 0.6) {

                                $('#registrar').attr('disabled', true);
                                $scope.show_progress = true;
                                toaster.pop('error', 'Eres un robot');
                            }
                            else {
                                var options = {
                                    method: 'PUT'
                                };

                                $auth.signup($scope.registro_usuario, options)
                                    .then(function (response) {
                                        $scope.user.username = $scope.registro_usuario.correo;
                                        $scope.user.password = $scope.registro_usuario.password;

                                        ///Evento GA4 - Envió de información formulario
                                        $googleAnalyticsService.eventoEnvioInformacionFormulario('sign_up', 'form');


                                        var options_login = {
                                            headers: {
                                                'Content-Type': 'application/x-www-form-urlencoded',
                                                'Authorization': 'Basic d2ViOjRiNWU1N2Y2ZWIyZjQyYjkwMzliM2QxZTEzOTI5Mjk1ZjIzMTc0OWM1MTBjYmUzNDFjZDY4MDM2ZDlhZjk3ZTI='
                                            }
                                        };
                                        $auth.login("grant_type=password" + "&username=" + encodeURIComponent($scope.user.username) + "&password=" + encodeURIComponent($scope.user.password), options_login)
                                            .then(function (response) {
                                                localStorage.setItem('info_token', JSON.stringify(response.data.data));
                                                $auth.setToken(response.data.data.access_token);
                                                localStorage.setItem('id', response.data.data.id_shakeshack);
                                                toaster.pop({
                                                    type: 'success',
                                                    title: '!Has iniciado sesión correctamente!',
                                                    body: '',
                                                    timeout: 3000
                                                });
                                                usuarioProvider.invitado = false;
                                                $scope.actualizar_informacion_usuario();
                                                $state.go("inicio");
                                            })
                                            .catch(function (response) {
                                                $('#registrar').attr('disabled', false);
                                                $scope.show_progress = false;

                                                switch (response.status) {
                                                    case 400:
                                                        $scope.error = true;
                                                        break;
                                                    case 500:
                                                        toaster.error("Error", "Ocurrió algo inesperado");
                                                        break;
                                                }
                                            });

                                    })
                                    .catch(function (error) {
                                        $scope.error = true;
                                        $('#registrar').attr('disabled', false);
                                        $scope.show_progress = false;
                                        $('html, body').animate({
                                            scrollTop: 0
                                        }, 800);
                                        switch (error.status) {
                                            case 400:
                                                $scope.error_message = error.data.message;
                                                break;
                                            case 500:
                                                $scope.error_message = error.data.message;
                                                break;
                                        }

                                    });

                            }
                        }).catch(function () {

                            $('#registrar').attr('disabled', true);
                            $scope.show_progress = true;
                        });
                    }).catch(function () {


                        $('#registrar').attr('disabled', true);
                        $scope.show_progress = true;
                    });

            }

            /////////////////////////////////////////////////////////////////////////////

        });
;
angular.module("shakeshack")
    .factory('Me', ['$http', function ($http) {
        return {

            tarjetas: function () {
                var oPromise = $http.get('/api/services/me/1.0/tarjetas')
                        .then(function (response) {
                            return response.data;
                        });
                return oPromise;
            },

            actualizar: function (user) {
                var oPromise =

                    $http.patch(
                        '/api/services/me/1.0/actualizar-informacion', user)
                        .then(function (response) {
                            return response.data;
                        });
                return oPromise;
            },
            agregar_tienda: function (id) {
                var oPromise =

                    $http.post(
                        '/api/services/me/1.0/favoritos/tienda/agregar',
                        {
                            id_tienda: id
                        }
                    )
                        .then(function (response) {
                            return response.data;
                        });
                return oPromise;
            },
            eliminar_tienda: function (id) {
                var oPromise =

                    $http.delete(
                        '/api/services/me/1.0/favoritos/tienda/eliminar/' + id)
                        .then(function (response) {
                            return response.data;
                        });
                return oPromise;
            },
            nueva_tarjeta: function (tarjeta) {
                var oPromise =

                    $http.put(
                        '/api/services/me/1.0/tarjetas/agregar', { payment_method_id: tarjeta})
                        .then(function (response) {
                            return response.data;
                        });
                return oPromise;
            },
            informacion: function () {
                var oPromise =

                    $http.get(
                        '/api/services/me/1.0/informacion')
                        .then(function (response) {
                            return response.data;
                        });
                return oPromise;
            },
            eliminar_tarjeta: function (id) {
                var oPromise =

                    $http.delete(
                        '/api/services/me/1.0/tarjetas/'+id)
                        .then(function (response) {
                            return response.data;
                        });
                return oPromise;
            },
            eliminar_orden: function (id) {
                var oPromise =

                    $http.delete(
                        '/api/services/me/1.0/favoritos/orden/eliminar/' + id)
                        .then(function (response) {
                            return response.data;
                        });
                return oPromise;
            },
            agregar_orden: function (id) {
                var oPromise =

                    $http.post(
                        '/api/services/me/1.0/favoritos/orden/agregar/' + id)
                        .then(function (response) {
                            return response.data;
                        });
                return oPromise;
            },
            pedir_nuevamente: function (nuevo_pedido) {
                var oPromise =

                    $http.post(
                        '/api/services/me/1.0/orden/pedir-nuevamente', nuevo_pedido)
                        .then(function (response) {
                            return response.data;
                        });
                return oPromise;
            }

        }
    }]);;


angular.module("shakeshack")
    .controller('MeCtrl',
        [
            'Me',
            '$scope',
            'toaster',
            '$auth',
            '$state',
            '$stateParams',
            '$anchorScroll',
            'Pedido',
            '$rootScope',
            'Stripe',
            'gRecaptcha',
            'ReCaptcha',
            'usuarioProvider',
            '$pedidoService'
            ,
            function
            (
                Me,
                $scope,
                toaster,
                $auth,
                $state,
                $stateParams,
                $anchorScroll,
                Pedido,
                $rootScope,
                Stripe,
                gRecaptcha,
                ReCaptcha,
                usuarioProvider,
                $pedidoService
            )
            {
                gRecaptcha.initialize({ key: $rootScope.key_reCaptcha }) // returns a promise


                init();

                $scope.procesandoOrden = '';
                $scope.edicion_menu = false;
                $scope.agregar_tarjeta = false;

                $scope.logout = function () {


                    if (localStorage.getItem('pedido') != null) {

                        Pedido.desasociar_usuario($rootScope.pedido.id)
                            .then(function () {
                                Pedido.consultar($rootScope.pedido.id)
                                    .then(function (response) {
                                        localStorage.setItem('pedido', JSON.stringify(response.data));
                                        $rootScope.actualizar_variables();
                                        $auth.logout();

                                        localStorage.removeItem('info_token');
                                        localStorage.removeItem('shk_token');
                                        localStorage.removeItem('es_mayor');
                                        $state.go("inicio");

                                    });

                            });
                    }
                    else {
                        $auth.logout();
                        localStorage.removeItem('info_token');
                        localStorage.removeItem('shk_token');
                        localStorage.removeItem('es_mayor');
                        $auth.logout();
                        $state.go("inicio");
                    }





                };

                /*
                $scope.logout = function () {
                    localStorage.removeItem('info_token');
                    localStorage.removeItem('shk_token');
                    localStorage.removeItem('es_mayor');

                    if (localStorage.getItem('pedido') != null) {
                        var pedido_viejo = {
                            id_pedido_viejo: JSON.parse(localStorage.getItem('pedido')).id,
                            timezone: "UTC" + moment().format('Z')
                        }
                        Pedido.merge(pedido_viejo).then(function (response) {
                            localStorage.removeItem('pedido');
                            localStorage.setItem('pedido', JSON.stringify(response.data));
                            $rootScope.actualizar_pedido();
                            $auth.logout();
                            $state.go("inicio");
                        }).catch(function (response) {
                            switch (response.status) {
                                case 400:
                                    toaster.warning("Error", response.data.error_description);

                                    break;
                                case 500:
                                    toaster.error("Error", response.data.error_description);

                                    break;
                            }
                        })
                    }
                    else {
                        $auth.logout();
                        $state.go("inicio");
                    }
           
                };*/

                $scope.tarjeta = {
                    no_tarjeta: '',
                    fecha_vigencia: '',
                    cvc: '',
                    token: ''
                }

                $scope.editar_informacion = function () {
                    $scope.edicion_menu = true;
                }

                $scope.cancelar_edicion = function () {
                    $scope.edicion_menu = false;
                }

                $scope.actualizar_informacion = {
                    nombre: '',
                    paterno: '',
                    materno: '',
                    correo: '',
                    telefono: '',
                    password_actual: '',
                    nuevo_password: ''
                };

                $scope.eliminar_tienda = function (id) {
                    Me.eliminar_tienda(id)
                        .then(function () {
                            init();
                        })
                        .catch(function () {
                        })
                };

                $scope.nueva_tarjeta = function () {
                    $rootScope.agregar_tarjeta = true;
                }

                //$scope.cancelar_edicion_tarjeta = function () {
                //    $rootScope.agregar_tarjeta = false;

                //}

                //$scope.guardar_tarjeta = function () {
                //    Stripe.guardar_tarjeta()
                //        .then(function (result) {
                //            if (typeof result.error !== 'undefined') {
                //                const displayError = document.getElementById('card-errors');

                //                displayError.textContent = result.error;
                //            }
                //            else {
                //                Me.nueva_tarjeta(result.paymentMethod.id).then(function () {
                //                    Stripe.cards.clear();

                //                    toaster.pop({
                //                        type: 'success',
                //                        title: 'Se agrego correctamente la tarjeta',
                //                        body: '',
                //                        timeout: 3000
                //                    });
                //                    init();
                //                    $scope.agregar_tarjeta = false;

                //                }).catch(function (response) {
                //                    Stripe.cards.clear();
                //                    $scope.agregar_tarjeta = false;

                //                    switch (response.status) {
                //                        case 400:
                //                            toaster.warning("Advertencia", response.data.message);

                //                            break;
                //                        case 500:
                //                            toaster.pop("error", response.data.message);

                //                            break;
                //                    }
                //                });
                //            }


                //        })
                //        .catch(function (response) {
                //            toaster.pop("error", response.data.message);
                //        });

                //}


                $scope.eliminar_tarjeta = function (id) {
                    Me.eliminar_tarjeta(id).then(function () {
                        toaster.pop({
                            type: 'success',
                            title: 'Se elimino correctamente la tarjeta',
                            body: '',
                            timeout: 3000
                        });
                        init();
                    }).catch(function (response) {
                        switch (response.status) {
                            case 400:
                                toaster.warning("Advertencia", response.data.message);

                                break;
                            case 500:
                                toaster.error("Error", response.data.message);

                                break;
                        }
                    })
                };


                $scope.agregar_orden = function (id) {
                    Me.agregar_orden(id)
                        .then(function () {
                            init();
                        })
                        .catch(function () {
                            switch (response.status) {
                                case 400:
                                    toaster.warning("Advertencia", response.data.message);

                                    break;
                                case 500:
                                    toaster.error("Error", response.data.message);

                                    break;
                            }
                        });

                };

                $scope.pedir_nuevamente = function (id) {
                    $scope.procesandoOrden = id;

                    var nuevo_pedido = {
                        id_pedido: id,
                        timezone: "UTC" + moment().format('Z')
                    }
                    Me.pedir_nuevamente(nuevo_pedido).then(function (response) {
                        $pedidoService.pedirNuevamente(response.data, null)
                        $scope.procesandoOrden = '';
                    }).catch(function (response) {

                        switch (response.status) {
                            case 400:
                                $pedidoService.pedirNuevamente(response.data.data, response.data.error.data)
                                $scope.procesandoOrden = '';
                                break;
                            case 500:
                                toaster.error("Error", response.data.message);
                                $scope.procesandoOrden = '';
                                break;
                        }
                    });




                }

                $scope.eliminar_orden = function (id) {
                    Me.eliminar_orden(id)
                        .then(function () {
                            init();
                        })
                        .catch(function (response) {
                            switch (response.status) {
                                case 400:
                                    toaster.warning("Advertencia", response.data.message);

                                    break;
                                case 500:
                                    toaster.error("Error", response.data.message);

                                    break;
                            }
                        });
                };

                $scope.actualizar_frm = function () {
                    gRecaptcha.execute({ action: 'actualizar_informacion_usuario' })
                        .then(function (token) {
                            var informacion = {
                                response: token,
                                remoteip: ''
                            }
                            ReCaptcha.confirmar_token(informacion).then(function (response) {
                                if (response.data.score < 0.6)
                                    toaster.pop('error', 'Eres un robot');
                                else {
                                    Me.actualizar($scope.actualizar_informacion)
                                        .then(function () {
                                            toaster.pop({
                                                type: 'success',
                                                title: 'Se actualizo correctamente la información',
                                                body: '',
                                                timeout: 3000
                                            });
                                            $scope.edicion_menu = false;
                                            init();

                                        })
                                        .catch(function (response) {
                                            switch (response.status) {
                                                case 400:
                                                    toaster.warning("Advertencia", response.data.message);

                                                    break;
                                                case 500:
                                                    toaster.error("Error", response.data.message);

                                                    break;

                                            }
                                        });

                                }
                            }).catch(function () {

                            });
                        });


                }

                function init() {
                    usuarioProvider.init();

                    Me.informacion().then(function (response) {
                        $scope.informacion_usuario = response.data;
                        $scope.actualizar_informacion.nombre = response.data.contacto.nombre;
                        $scope.actualizar_informacion.paterno = response.data.contacto.paterno;
                        $scope.actualizar_informacion.materno = response.data.contacto.materno;
                        $scope.actualizar_informacion.correo = response.data.contacto.correo;
                        $scope.actualizar_informacion.telefono = response.data.contacto.telefono;

                    }).catch(function (error) {
                        localStorage.removeItem('shk_token');
                        localStorage.removeItem('es_mayor');
                        localStorage.removeItem('info_token');
                        $state.go("inicio");
                    })
                }
    }])
    .directive('shkSeccion', ['$location', '$anchorScroll', function ($location, $anchorScroll) {


        return {
            //scope: {
            //    status: '@',
            //    max: '@'
            //},
            link: function (scope, element, attr, ctrl) {
                element.bind("click", function () {
                    angular.element('#side-menu-acc').find('li.active').each(function (i, e) {
                        angular.element(e).removeClass('active');
                    });

                    element.parent().addClass('active')
                });
            }
        }
    }]);;
angular.module("shakeshack")
    .controller('CheckoutCtrl',
        [
            '$window',
            'usuarioProvider',
            'checkoutProvider',
            'PayPalApi',
            '$scope',
            '$state',
            '$stateParams',
            'Pedido',
            'Tienda',
            'toaster',
            '$rootScope',
            '$auth',
            'Usuario',
            '$timeout',
            'Stripe',
            'Me',
            'gRecaptcha',
            'ReCaptcha',
            '$googleAnalyticsService',
            'errores',
            'etiquetasFormulario',

            '$checkoutService',

            function (
                $window,
                usuarioProvider,
                checkoutProvider,
                PayPalApi,
                $scope,
                $state,
                $stateParams,
                Pedido,
                Tienda,
                toaster,
                $rootScope,
                $auth,
                Usuario,
                $timeout,
                Stripe,
                Me,
                gRecaptcha,
                ReCaptcha,
                $googleAnalyticsService,
                errores,
                etiquetasFormulario,
                $checkoutService
            ) {
                gRecaptcha.initialize({ key: $rootScope.key_reCaptcha }) // returns a promise
                
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                // #PROPIEDADES
                $scope.checkoutService = $checkoutService;

                $scope.errores = errores;
                $scope.etiquetasFormulario = etiquetasFormulario;
                /*
                 *Registrate
                 */
                $scope.mensaje_error_registrate = '';
                $scope.error_registrate = false;

                /**
                 * Login
                 * */
                $scope.mensaje_error = '';
                $scope.error_login = false;

                /*
                 *Progress
                 */

                $scope.progressbar_checkout = true;
                $scope.progress_boton = false;


                /**
                 * Validaciones para procesar el pago
                 * */
                $scope.hora_seleccionada = false;
                $scope.metodo_pago_agregado = false;


                /**
                 * Metodo de pago
                 * */
                $scope.nueva_tarjeta = true;
                $scope.cancelar_metodo_pago = false;
                $scope.mensaje_tarjeta_error = ''

                /**
                 * Cupón
                 * */
                $scope.cupon_error = false;
                //$rootScope.cupon;
                //$scope.cuponAplicado = false;

                //Variables//////////////////////////////////////////
                $rootScope.checkout_bag = false;

                $scope.mostar_login_checkout = false;
                $scope.signup_checkout = false;
                $scope.show_form_invitado = false;
                $scope.cliente = false;
                $scope.show_buttons = false;
                $scope.tarjeta_datos = false;
                $scope.usuario = false;
                $scope.progressbar = false;
                $scope.check_nueva_tarjeta;
                $scope.error_message = '';
                $scope.error = false;
                $scope.mostar_horarios = true;
                $scope.horarios = [];
                $scope.opcion_seleccionada;
                $scope.tarjeta_seleccionada;
                $scope.fecha = moment().format('MMMM Do YYYY');

                /* Datos necesarios para el envio de mensaje y el menú de tienda*/
                $scope.telefono_confirmado = true;
                $scope.mostrar_telefono = false;
                $scope.fecha_nacimiento_confirmada = true;
                $scope.mostrar_fecha = false;
                /*************************************************** */

                $scope.registro_usuario = {
                    telefono: ''
                };

                $scope.registro_usuario = {
                    fecha_nacimiento: '',
                };

                $scope.user = {
                    grant_type: "password",
                    username: "",
                    password: ""
                };

                var options = {
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Authorization': 'Basic d2ViOjRiNWU1N2Y2ZWIyZjQyYjkwMzliM2QxZTEzOTI5Mjk1ZjIzMTc0OWM1MTBjYmUzNDFjZDY4MDM2ZDlhZjk3ZTI='
                    }
                };

                $scope.invitado = {
                };
                $scope.tarjeta = {
                    no_tarjeta: '',
                    cvc: '',
                    fecha: ''
                }

                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                // #MÉTODOS

                /*
                 *Función para validar si existe un pedido.
                 * 
                 */
                $scope.existe_pedido = function () {
                    if ($rootScope.pedido == null || localStorage.getItem('pedido') == null) {
                        return false
                    }
                    return true;
                }

                if (!$scope.existe_pedido())
                    $state.go('inicio');

                Tienda.horarios_entrega_V110
                    (
                        JSON.parse(localStorage.getItem('pedido')).tienda.id_local,
                        "UTC" + moment().format('Z'),
                        JSON.parse(localStorage.getItem('pedido')).id
                    ).then(function (response) {
                    $scope.horarios = response.data;
                    $scope.mostar_horarios = true;
                }).catch(function (response) {
                    $scope.mostar_horarios = false;
                    toaster.pop('error', response.data == null ? "Lo sentimos los horarios de entrega no están disponibles" :response.data.message);
                })

                Pedido.checkout(JSON.parse(localStorage.getItem('pedido')).id)
                    .then(function () {
                        $rootScope.actualizar_pedido();
                    })
                    .catch(function (response) {
                        toaster.pop('error', response.data.message);
                    });

                $scope.actualizar_informacion_usuario = function () {
                    Me.informacion().then(function (response) {
                        localStorage.setItem('es_mayor', response.data.contacto.es_mayor);
                    })
                        .catch(function (error) {
                        })
                    /*  if (localStorage.getItem('pedido') != null) {
                       
                          /*var pedido_viejo = {
                              id_pedido_viejo: JSON.parse(localStorage.getItem('pedido')).id,
                              timezone: "UTC" + moment().format('Z')
                          }
                          Pedido.merge(pedido_viejo).then(function (response) {
                              localStorage.removeItem('pedido');
                              localStorage.setItem('pedido', JSON.stringify(response.data));
                              $rootScope.actualizar_pedido();
                          }).catch(function (response) {
                              switch (response.status) {
                                  case 400:
                                      toaster.warning("Error", response.data.error_description);
          
                                      break;
                                  case 500:
                                      toaster.error("Error", response.data.error_description);
          
                                      break;
          
                              }
                          })
          
                      }*/


                }

                /*
                * Condiciones iniciales del pedido
                * **/
                $scope.init = function () {

                    checkoutProvider.init();

                    //Stripe.cargar_elementos_stripe();

                    Pedido.consultar(JSON.parse(localStorage.getItem('pedido')).id).then(function (response) {
                        localStorage.setItem('pedido', JSON.stringify(response.data));
                        $rootScope.pedido = JSON.parse(localStorage.getItem('pedido'));

                        $rootScope.no_productos = 0;
                        JSON.parse(localStorage.getItem('pedido')).productos_agregados.forEach(function (producto, index) {
                            $rootScope.no_productos += producto.totales.cantidad
                        })
                        if ($rootScope.pedido.cupones.length >= 1) {
                            $("#aplicar_cupon").attr('disabled', true);
                            $("#cupon_txt").attr('disabled', true);
                            $rootScope.cupon = $rootScope.pedido.cupones[0].cupon;
                            $rootScope.cuponAplicado = true;
                        }

                        if ($auth.isAuthenticated()) {
                            localStorage.setItem('es_mayor', $rootScope.pedido.cliente.es_mayor)
                        }

                        if ($rootScope.pedido.metodo_pago != null) {
                            $scope.nueva_tarjeta = false
                            $scope.cancelar_metodo_pago = true;
                            $scope.metodo_pago_agregado = true;
                            $("#tarjetas").attr('disabled', true);
                        }
                        else {
                            $scope.nueva_tarjeta = true
                            $scope.cancelar_metodo_pago = false;
                            $scope.metodo_pago_agregado = false;
                            $("#tarjetas").attr('disabled', false);
                        }

                        if (JSON.parse(localStorage.getItem('pedido')).cliente != null && JSON.parse(localStorage.getItem('pedido')).cliente.telefono == null && $rootScope.isAuthenticated()) {
                            $scope.mostrar_telefono = true;
                            $scope.telefono_confirmado = false;
                        }
                        if (JSON.parse(localStorage.getItem('pedido')).cliente != null && JSON.parse(localStorage.getItem('pedido')).cliente.fecha_nacimiento == null && $rootScope.isAuthenticated()) {
                            $scope.fecha_nacimiento_confirmada = false;
                            $scope.mostrar_fecha = true;
                        }

                        if ($rootScope.isAuthenticated() || (JSON.parse(localStorage.getItem('pedido')).cliente != null && JSON.parse(localStorage.getItem('pedido')).cliente.nombre != null)) {
                            $scope.show_order = true;
                        }
                        else if (JSON.parse(localStorage.getItem('pedido')).cliente == null) {
                            $scope.show_order = false;
                            $scope.cliente = true;
                            $scope.show_buttons = true;
                        }

                        if (JSON.parse(localStorage.getItem('pedido')).cupones.length >= 1) {
                            $rootScope.cuponAplicado = true;
                        }

                        $('html, body').animate({
                            scrollTop: 0
                        }, 800);

                    }).catch(function (response) {
                        localStorage.removeItem('pedido');
                        switch (response.status) {
                            case 400:
                                toaster.warning("Advertencia", response.data.message);
                                break;
                            case 500:
                                toaster.error("Error", response.data.message);
                                break;
                        }
                    });

                };


                /*
                 *Mostar botones o progressbar
                 */
                $scope.mostrar_botones_o_progressbar = function (seccion, estatus) {

                    $scope.progress_boton = estatus;
                    $scope.progressbar = estatus;


                    switch (seccion) {
                        case "nuevo_metodo_pago":

                            $("#agregar_nuevo_metodo_pago").attr('disabled', estatus);

                            break;
                        case "eliminar_metodo_pago":
                            $("#cancelar_metodo_pago").attr('disabled', estatus);

                            break;
                        case "asociar_metodo_pago":

                            $("#agregar_metodo_pago_existente").attr('disabled', estatus);

                            break;
                        case "aplicar_cupon":

                            $("#aplicar_cupon").attr('disabled', estatus);
                            $("#confirmar_pago").attr('disabled', estatus);
                            break;
                        case "registrar_invitado":
                            $("#invitado_registro_btn").attr('disabled', estatus);

                            break;

                        case "login":

                            $("#login_btn").attr('disabled', estatus);


                            break;
                        case "registrate":

                            $("#registrate_btn").attr('disabled', estatus);


                            break;
                        case "pagar":
                            $("#confirmar_pago").attr('disabled', estatus);
                            break;
                        case "actualizar_datos_usuario":
                            $("#actualizar_datos_usuario").attr('disabled', estatus);
                            break;

                        default:
                            break;

                    }
                }


                /**
                 * Agregar un nuevo metodo de pago
                 * */

                $scope.cambio_tarjeta = function (tarjeta_seleccionada) {
                    //if (tarjeta_seleccionada == null) {
                    //    Stripe.cargar_elementos_stripe();
                    //    $scope.nueva_tarjeta = true;
                    //}
                    //else {
                    //    $scope.nueva_tarjeta = false;
                    //    $scope.check_nueva_tarjeta = "on_session";
                    //}
                }


                $scope.agregar_nuevo_metodo_pago = function () {
                    $scope.mostrar_botones_o_progressbar("nuevo_metodo_pago", true);
                    Stripe.guardar_tarjeta()
                        .then(function (result) {
                            if (typeof result.error !== 'undefined') {
                                const displayError = document.getElementById('card-errors');
                                displayError.textContent = result.error;
                                $scope.mostrar_botones_o_progressbar("nuevo_metodo_pago", false);

                            }
                            else {
                                var request_nuevo_metodo_pago = {
                                    id_payment_method: result.paymentMethod.id,
                                    id_pedido: $rootScope.pedido.id,
                                    guardar: $scope.check_nueva_tarjeta == 'off_session'
                                };
                                Pedido.agregar_metodo_pago_por_id(request_nuevo_metodo_pago)
                                    .then(function () {
                                        $rootScope.actualizar_pedido();

                                        toaster.pop({
                                            type: 'success',
                                            title: '¡Se agrego correctamente el método de pago!',
                                            body: '',
                                            timeout: 3000
                                        });
                                        $scope.mostrar_botones_o_progressbar("nuevo_metodo_pago", false);

                                        $scope.mensaje_tarjeta_error = '';
                                        $scope.metodo_pago_agregado = true;
                                        $("#tarjetas").attr('disabled', true);
                                        $scope.cancelar_metodo_pago = true;
                                        $scope.nueva_tarjeta = false;
                                        Stripe.cards.clear();

                                    })
                                    .catch(function (response) {
                                        $scope.mostrar_botones_o_progressbar("nuevo_metodo_pago", false);
                                        $scope.mostrar_errores(response.data.message, 4)
                                    })
                            }


                        })
                        .catch(function (response) {
                            $scope.mostrar_botones_o_progressbar("nuevo_metodo_pago", false);
                            $scope.mostrar_errores(response.data.message, 4)
                        });
                }

                $scope.eliminar_metodo_pago = function () {
                    $scope.mostrar_botones_o_progressbar("eliminar_metodo_pago", true);
                    Pedido.eliminar_metodo_pago($rootScope.pedido.id, $rootScope.pedido.metodo_pago.id)
                        .then(function (response) {
                            toaster.pop({
                                type: 'success',
                                title: '¡Se elimino correctamente el método de pago!',
                                body: '',
                                timeout: 3000
                            });

                            $scope.mostrar_botones_o_progressbar("eliminar_metodo_pago", false);

                            $scope.metodo_pago_agregado = false;
                            $("#tarjetas").attr('disabled', false);
                            $scope.cancelar_metodo_pago = false;
                            $scope.nueva_tarjeta = true;
                            $scope.mensaje_tarjeta_error = '';
                            $rootScope.actualizar_pedido();

                        })
                        .catch(function (response) {
                            $scope.mostrar_botones_o_progressbar("eliminar_metodo_pago", false);

                            $scope.mostrar_errores(response.data.message, 4)
                        })
                }

                $scope.asociar_metodo_pago = function () {
                    $scope.mostrar_botones_o_progressbar("asociar_metodo_pago", true);
                    var request = {
                        id_metodo_pago: $scope.tarjeta_seleccionada,
                        id_pedido: $rootScope.pedido.id
                    };
                    Pedido.asociar_metodo_pago(request)
                        .then(function (response) {
                            $rootScope.actualizar_pedido();

                            toaster.pop({
                                type: 'success',
                                title: '¡Se agrego correctamente el método de pago!',
                                body: '',
                                timeout: 3000
                            });
                            $scope.metodo_pago_agregado = true;
                            $("#tarjetas").attr('disabled', true);
                            $scope.cancelar_metodo_pago = true;
                            $scope.nueva_tarjeta = false;
                            Stripe.cards.clear();
                            $scope.mensaje_tarjeta_error = '';
                            $scope.mostrar_botones_o_progressbar("asociar_metodo_pago", false);

                        })
                        .catch(function (response) {
                            $scope.mostrar_botones_o_progressbar("asociar_metodo_pago", false);
                            $scope.mostrar_errores(response.data.message, 4);
                        });
                }

   
                /**         
                 * Botones de login 
                 */
                $scope.botones_login = function (modulo, stepName) {
                    switch (modulo) {
                        case "cancelar_registro":

                            //Evento GA4 - Eliminar intervalo de mostrar errores
                            $googleAnalyticsService.eliminarIntervaloErroresFormulario()

                            //Evento GA4 - Restablecer bandera de revisión de las etqiuetas de errores del formulario
                            $googleAnalyticsService.restablecerEtiquetasDeErrorFormulario();

                            $scope.signup_checkout = false;
                            $scope.show_buttons = true;
                            break;
                        case "cancelar_login":

                            //Evento GA4 - Eliminar intervalo de mostrar errores
                            $googleAnalyticsService.eliminarIntervaloErroresFormulario()

                            ///Evento GA4 - Botón seleccionado checkout
                            $googleAnalyticsService.eventoBotonSeleccionado('checkout', 'click', 'cancelar', 'inicia sesion', 2);

                            //Evento GA4 - Restablecer bandera de revisión de las etqiuetas de errores del formulario
                            $googleAnalyticsService.restablecerEtiquetasDeErrorFormulario();

                            $scope.mostar_login_checkout = false;
                            $scope.show_buttons = true;
                            break;
                        case "recuperar_password":
                            
                            ///Evento GA4 - Botón seleccionado checkout
                            $googleAnalyticsService.eventoBotonSeleccionado('checkout','click', 'olvidaste tu contraseña', stepName, 2);

                            $rootScope.checkout_bag = true;
                            $state.go('inicio.recuperar');
                            break;
                        case "mostrar_login":
                            $scope.loginFrm.$setPristine();
                            $scope.loginFrm.$setUntouched();                         

                            //Evento GA4 - Establecer intervalo de mostrar errores
                            $googleAnalyticsService.establecerIntervaloDeErroresFormulario()

                            ///Evento GA4 - Botón seleccionado checkout
                            $googleAnalyticsService.eventoBotonSeleccionado('checkout', 'click','iniciar sesión','identificación', 1);

                            $scope.mostar_login_checkout = true;
                            $scope.show_buttons = false;
                            break;
                        case "mostrar_registro_invitado":
                            $scope.invitadoFrm.$setPristine();
                            $scope.invitadoFrm.$setUntouched();

                            //Evento GA4 - Establecer intervalo de mostrar errores
                            $googleAnalyticsService.establecerIntervaloDeErroresFormulario()


                            ///Evento GA4 - Botón seleccionado checkout
                            $googleAnalyticsService.eventoBotonSeleccionado('checkout', 'click', 'continuar como invitado','identificacion', 1);

                            $scope.show_form_invitado = true;
                            $scope.show_buttons = false;
                            break;
                        case "editar_informacion_invitado":
                            $scope.show_form_invitado = true;
                            $scope.cliente = true;
                            $scope.show_order = false;
                            $scope.show_buttons = false;
                            break;
                        case "mostar_registro":
                            $scope.signupFrm.$setPristine();
                            $scope.signupFrm.$setUntouched();

                            //Evento GA4 - Establecer intervalo de mostrar errores
                            $googleAnalyticsService.establecerIntervaloDeErroresFormulario()
 

                            ///Evento GA4 - Botón seleccionado checkout
                            $googleAnalyticsService.eventoBotonSeleccionado('checkout', 'click', 'registrate', 'identifiación',1);

                            $scope.signup_checkout = true;
                            $scope.show_buttons = false;
                            break;
                        case "cancelar_registro_invitado":

                            //Evento GA4 - Eliminar intervalo de mostrar errores
                            $googleAnalyticsService.eliminarIntervaloErroresFormulario()

                            ///Evento GA4 - Botón seleccionado checkout invitado
                            $googleAnalyticsService.eventoBotonSeleccionadoCheckoutInvitado('cancelar');

                            //Evento GA4 - Restablecer bandera de revisión de las etqiuetas de errores del formulario
                            $googleAnalyticsService.restablecerEtiquetasDeErrorFormulario();

                            $scope.show_form_invitado = false;
                            $scope.show_buttons = true;
                            break;
                    }
                }

                $scope.editar_pedido = function (id) {
                    $rootScope.checkout_bag = true;
                    $state.go('inicio.menu', { id: id });
                }


                /**
                 * Funciones para mostrar mensajes al usuario
                 */

                $scope.mostrar_errores = function (mensaje, codigo, mostrar) {
                    $scope.progress_boton = false;
                    $scope.progressbar = false;
                    $("#confirmar_pago").attr('disabled', false);
                    var offset;

                    switch (codigo) {
                        case 1:
                            $scope.usuario = true;
                            $scope.mensaje_error_usuario = mensaje;
                            offset = $("#usuario").offset().top;
                            $('html, body').animate({
                                scrollTop: offset
                            }, 800);

                            $timeout(function () {
                                $scope.usuario = !mostrar;
                            }, 5000);


                            break;
                        case 2:
                            $scope.horario = true;
                            $scope.mensaje_error_horario = mensaje;
                            offset = $("#horario").offset().top;
                            $('html, body').animate({
                                scrollTop: offset
                            }, 800);

                            break;
                        case 3:
                            $("#aplicar_cupon").attr('disabled', !mostrar);
                            $scope.cupon_error = mostrar;
                            $scope.mensajes_error_cupon = mensaje;

                            $timeout(function () {
                                $scope.cupon_error = false;
                            }, 5000);

                            break;
                        case 4:
                            $scope.tarjeta_error = true;
                            $scope.mensaje_tarjeta_error = mensaje;


                            $timeout(function () {
                                $scope.tarjeta_error = !mostrar;
                            }, 5000);


                            offset = $("#tarjeta").offset().top;
                            $('html, body').animate({
                                scrollTop: offset
                            }, 800);



                            break;
                        case 5:
                            $scope.error = true;
                            $scope.error_message = mensaje;
                            $('html, body').animate({
                                scrollTop: 0
                            }, 800);

                            $timeout(function () {
                                $scope.error = !mostrar;
                            }, 5000);


                            break;
                        case 6:
                            $scope.error_login = mostrar;
                            $scope.mensaje_error = mensaje;
                            $timeout(function () {
                                $scope.error_login = !mostrar;
                            }, 5000)
                            $('html, body').animate({
                                scrollTop: 0
                            }, 800);
                            break;
                        case 7:
                            $scope.error_registrate = mostrar;
                            $scope.mensaje_error_registrate = mensaje;
                            $timeout(function () {
                                $scope.error_registrate = !mostrar;
                            }, 5000)
                            $('html, body').animate({
                                scrollTop: 0
                            }, 800);
                            break;

                    }
                }

                $scope.variables_registro_usuario = function (response, codigo) {
                    switch (codigo) {
                        case 1:/*autenticación por correo y password*/
                            //$scope.actualizar_informacion_usuario();

                            Pedido.asociar_usuario($rootScope.pedido.id)
                                .then(function () {
                                    Pedido.checkout($rootScope.pedido.id)
                                        .then(function (response) {
                                            Pedido.consultar($rootScope.pedido.id)
                                                .then(function (response) {
                                                    localStorage.setItem('pedido', JSON.stringify(response.data));
                                                    $rootScope.actualizar_variables();

                                                    $scope.show_buttons = false;
                                                    $scope.cliente = false;
                                                    $scope.show_order = true;

                                                    $scope.mostrar_botones_o_progressbar('login', false)


                                                    toaster.pop({
                                                        type: 'success',
                                                        title: '!Has iniciado sesión correctamente!',
                                                        body: '',
                                                        timeout: 3000
                                                    });
                                                });
                                        }).catch(function (response) {
                                            toaster.pop('error', response.data.message);
                                        });

                                });
                            break;
                        case 2:/*autenticación por facebook o google*/

                            Pedido.asociar_usuario($rootScope.pedido.id)
                                .then(function () {
                                    Pedido.checkout($rootScope.pedido.id)
                                        .then(function () {
                                            Pedido.consultar($rootScope.pedido.id)
                                                .then(function (response) {
                                                    localStorage.setItem('pedido', JSON.stringify(response.data));
                                                    $rootScope.actualizar_variables();

                                                    $scope.show_buttons = false;
                                                    $scope.cliente = false;
                                                    $scope.show_order = true;

                                                    $scope.mostrar_botones_o_progressbar('login', false)

                                                    if (response.data.cliente.telefono == null) {
                                                        $scope.mostrar_telefono = true;
                                                        $scope.telefono_confirmado = false;
                                                    }
                                                    if (response.data.cliente.fecha_nacimiento == null) {
                                                        $scope.fecha_nacimiento_confirmada = false;
                                                        $scope.mostrar_fecha = true;
                                                    }

                                                    toaster.pop({
                                                        type: 'success',
                                                        title: '!Has iniciado sesión correctamente!',
                                                        body: '',
                                                        timeout: 3000
                                                    });
                                                });
                                        }).catch(function (response) {
                                            toaster.pop('error', response.data.message);
                                        })


                                });

                            /*************************************************** */

                            break;

                        case 3:/*registro como invitado*/
                            /* $rootScope.actualizar_pedido();*/
                            Pedido.consultar($rootScope.pedido.id)
                                .then(function (response) {
                                    $scope.show_buttons = false;
                                    $scope.cliente = false;
                                    $scope.show_order = true;
                                    localStorage.setItem('pedido', JSON.stringify(response.data));
                                    $rootScope.actualizar_variables();
                                    toaster.pop({
                                        type: 'success',
                                        title: '!Se registro correctamente la información!',
                                        body: '',
                                        timeout: 3000
                                    });
                                    $scope.mostrar_botones_o_progressbar('registrar_invitado', false);
                                }).catch(function (response) { });
                            break;

                        case 4:/*registro como usuario del portal*/

                            Pedido.asociar_usuario($rootScope.pedido.id)
                                .then(function () {
                                    Pedido.checkout($rootScope.pedido.id)
                                        .then(function () {
                                            Pedido.consultar($rootScope.pedido.id)
                                                .then(function (response) {
                                               

                                                    if (response.data.cliente.telefono == null) {
                                                        $scope.mostrar_telefono = true;
                                                        $scope.telefono_confirmado = false;
                                                    }
                                                    if (response.data.cliente.fecha_nacimiento == null) {
                                                        $scope.fecha_nacimiento_confirmada = false;
                                                        $scope.mostrar_fecha = true;
                                                    }

                                                    $scope.signup_checkout = false;
                                                    $scope.show_buttons = false;
                                                    $scope.cliente = false;
                                                    $scope.show_order = true;

                                                    localStorage.setItem('pedido', JSON.stringify(response.data));
                                                    $rootScope.actualizar_variables();

                                                    $scope.mostrar_botones_o_progressbar('registrate', false)
                                             
                                                    toaster.pop({
                                                        type: 'success',
                                                        title: '!Has iniciado sesión correctamente!',
                                                        body: '',
                                                        timeout: 3000
                                                    });
                                                });
                                        }).catch(function (response) {
                                            toaster.pop('error', response.data.message);
                                        })


                                });
                        
                            break;
                        case 5:/*actualización de los datos del cliente teléfono y fecha de nacimiento*/


                            Pedido.consultar($rootScope.pedido.id)
                                .then(function (response) {

                                    /* Datos necesarios para el envio de mensaje y el menú de tienda*/
                                    $scope.telefono_confirmado = true;
                                    $scope.mostrar_telefono = false;
                                    $scope.fecha_nacimiento_confirmada = true;
                                    $scope.mostrar_fecha = false;
                                    /*************************************************** */
                                    localStorage.setItem('pedido', JSON.stringify(response.data));
                                    $rootScope.actualizar_variables();
                                    toaster.pop({
                                        type: 'success',
                                        title: '!Se registro correctamente la información!',
                                        body: '',
                                        timeout: 3000
                                    });
                                    $scope.mostrar_botones_o_progressbar("actualizar_datos_usuario", false);
                                }).catch(function (response) { console.log(response.message); });
                            $rootScope.actualizar_pedido();

                            break;
                    }

                }


                /***
                 * Funciones antes de procesar el pedido
                 * Aplicar cupón
                 * Actualizar horario de entrega
                 * */
                $scope.aplicar_cupon = function () {

                    ///Evento GA4 - Aplicar cupón
                    $googleAnalyticsService.eventoAplicarCupon($rootScope.cupon);


                    $scope.mostrar_botones_o_progressbar('aplicar_cupon', true);

                    if (!$scope.existe_pedido())
                        $state.go('inicio');

                    var cupon_aplicar = {
                        cupon: $rootScope.cupon,
                        id_pedido: $rootScope.pedido.id,
                        timezone: "UTC" + moment().format('Z'),
                        canal: "WEB"
                    }
                    Pedido.aplicar_cupon(cupon_aplicar)
                        .then(() => {

                            Pedido.consultar(JSON.parse(localStorage.getItem('pedido')).id).then((response) => {

                                localStorage.setItem('pedido', JSON.stringify(response.data));
                                $rootScope.pedido = JSON.parse(localStorage.getItem('pedido'));

                                try {
                                    checkoutProvider.paymentRequest.update({
                                        total: {
                                            label: 'Pedido',
                                            amount: JSON.parse(localStorage.getItem('pedido')).pago[2].cantidad * 100,
                                        }
                                    });
                                } catch (e) {

                                }

                                toaster.pop({
                                    type: 'success',
                                    title: '!Se aplico correctamente el cupón!',
                                    body: '',
                                    timeout: 3000
                                });


                                $rootScope.cuponAplicado = true;
                                $("#cupon_txt").attr('disabled', true);
                                $scope.mostrar_botones_o_progressbar('aplicar_cupon', false);
                                $scope.mostrar_errores('', 3, false);

                            })


                        })
                        .catch(function (response) {
                            console.log(response);
                            try {
                                $googleAnalyticsService.eventoErrorAplicarCupon(response.data.message, "000", $rootScope.cupon);

                            } catch (e) {

                            }
                            ///Evento GA4 - Error aplicar cupón

                            $scope.mostrar_botones_o_progressbar('aplicar_cupon', false);
                            $scope.mostrar_errores(response.data.message, 3, true);
                        });
                }      

                /**
                 * Version 1.1. Se modifica el servicio a la versión 1.1, además de la hora de envia si es ASAP o no 
                 * @param {object} opcion
                 */
                $scope.cambio_horario = function (opcion) {
                    if (!$scope.existe_pedido())
                        $state.go('inicio');

                    ///Evento GA4 - Seleccionar horario de entrega
                    $googleAnalyticsService.eventoSeleccionarHorarioEntrega($scope.fecha, new Date(opcion.hora_entrega));

                    Pedido.m1_actualizar_fecha(JSON.parse(localStorage.getItem('pedido')).id, {
                        es_asap: opcion.es_asap,
                        fecha_entrega: opcion.hora_entrega
                    })
                        .then(function () {
                            $rootScope.actualizar_pedido();
                            $scope.error = false;
                            $scope.horario = false;
                            toaster.pop({
                                type: 'success',
                                title: 'Se actualizó correctamente la hora de entrega',
                                body: '',
                                timeout: 3000
                            });
                        })
                        .catch(function (response) {
                            $scope.mostrar_errores(response.data.message, 5);
                        })
                    if (opcion != null) {
                        $scope.hora_seleccionada = true;
                        checkoutProvider.hora_entrega = true;
                        $rootScope.mostar_error_seccion = false;
                    }
                    else {
                        checkoutProvider.hora_entrega = false;
                        $scope.hora_seleccionada = false;
                    }

                }

                /**
                 * Login usuario y  **
                 * */

                $scope.login_checkout = function () {

                    ///Evento GA4 - Botón seleccionado checkout
                    $googleAnalyticsService.eventoBotonSeleccionado('login', 'iniciar sesión','checkout','inicia sesión', 2);

                    $scope.mostrar_botones_o_progressbar('login', true)

                    if (!$scope.existe_pedido())
                        $state.go('inicio');
                    gRecaptcha.execute({ action: 'login' })
                        .then(function (token) {
                            var informacion = {
                                response: token,
                                remoteip: ''
                            }
                            ReCaptcha.confirmar_token(informacion).then(function (response) {
                                if (response.data.score < 0.6)
                                    toaster.pop('error', 'Eres un robot');
                                else {

                                    var options = {
                                        headers: {
                                            'Content-Type': 'application/x-www-form-urlencoded',
                                            'Authorization': 'Basic d2ViOjRiNWU1N2Y2ZWIyZjQyYjkwMzliM2QxZTEzOTI5Mjk1ZjIzMTc0OWM1MTBjYmUzNDFjZDY4MDM2ZDlhZjk3ZTI='
                                        }
                                    };

                                    $auth.login("grant_type=password" + "&username=" + $scope.user.username + "&password=" + $scope.user.password, options)
                                        .then(function (response) {

                                            //Evento GA4 - Eliminar intervalo de mostrar errores
                                            $googleAnalyticsService.eliminarIntervaloErroresFormulario()


                                            localStorage.setItem('info_token', JSON.stringify(response.data.data));
                                            localStorage.setItem('id', response.data.data.id_shakeshack);
                                            $auth.setToken(response.data.data.access_token);
                                            $scope.variables_registro_usuario(response, 1);
                                            usuarioProvider.invitado = false;

                                            //Evento GA4 - Envió de información formulario
                                            $googleAnalyticsService.eventoEnvioInformacionFormulario('login', 'normal');


                                            //Evento GA4 - Restablecer bandera de revisión de las etqiuetas de errores del formulario
                                            $googleAnalyticsService.restablecerEtiquetasDeErrorFormulario();
                                        })
                                        .catch(function (response) {

                                            ///Evento GA4 - Errores formulario
                                            $googleAnalyticsService.eventoErroresFormulario(response.data.message, "000", "login", "inicia sesion", 2);


                                            $scope.mostrar_errores(response.data.message, 6, true);
                                            $scope.mostrar_botones_o_progressbar('login', false)

                                            /*switch (response.status) {
                                                case 400:
                                                    toaster.warning("Error", response.data.error_description);
                                                    break;
                                                case 500:
                                                    toaster.error("Error", response.data.error_description);
                                                    break;
                                            }*/
                                        });

                                }
                            }).catch(function () {
                                $scope.mostrar_botones_o_progressbar('login', false)
                            });
                        }).catch(function (response) {

                            $scope.mostrar_errores(response.data.message,6,true);
                            $scope.mostrar_botones_o_progressbar('login', false)
                        });

                }

                /**
                 * Autenticacion google y facebook checkout
                 */
                $scope.authenticate_checkout = function (provider) {

                    ///Evento GA4 - Botón seleccionado checkout
                    $googleAnalyticsService.eventoBotonSeleccionado('login', provider, 'checkout', 'inicia sesión', 2);

                    $scope.mostrar_botones_o_progressbar('login', true)

                    if (!$scope.existe_pedido())
                        $state.go('inicio');
                    gRecaptcha.execute({ action: 'autenticacion_red_social' })
                        .then(function (token) {
                            var informacion = {
                                response: token,
                                remoteip: ''
                            }
                            ReCaptcha.confirmar_token(informacion).then(function (response) {
                                if (response.data.score < 0.6)
                                    toaster.pop('error', 'Eres un robot');
                                else {
                                    $auth.authenticate(provider)
                                        .then(function (response) {

                                            //Evento GA4 - Eliminar intervalo de mostrar errores
                                            $googleAnalyticsService.eliminarIntervaloErroresFormulario()

                                            usuarioProvider.invitado = false;
                                            localStorage.setItem('info_token', JSON.stringify(response.data));
                                            $auth.setToken(response.data.access_token);
                                            localStorage.setItem('id', response.data.id_shakeshack);
                                            $scope.variables_registro_usuario(response, 2);

                                            ///Evento GA4 - Evento información formulario
                                            $googleAnalyticsService.eventoEnvioInformacionFormulario('login', provider);

                                            //Evento GA4 - Restablecer bandera de revisión de las etqiuetas de errores del formulario
                                            $googleAnalyticsService.restablecerEtiquetasDeErrorFormulario();
                                        })
                                        .catch(function (response) {
                                            $scope.mostrar_errores(response.data.message, 6);
                                            $scope.mostrar_botones_o_progressbar('login', false)

                                        });

                                }
                            }).catch(function () {
                                $scope.mostrar_botones_o_progressbar('login', false);
                            });
                        }).catch(function (response) {
                            $scope.mensaje_error = response.data.message;;
                            $scope.mostrar_botones_o_progressbar('login', false);
                        });
                };

                /**
                 * Registrar invitado
                 * */
                $scope.submit_invitado = function () {

                    ///Evento GA4 - Botón seleccionado checkout invitado
                    $googleAnalyticsService.eventoBotonSeleccionadoCheckoutInvitado('continuar-como-invitado');


                    $scope.mostrar_botones_o_progressbar('registrar_invitado', true)

                    if (!$scope.existe_pedido())
                        $state.go('inicio');
                    gRecaptcha.execute({ action: 'login' })
                        .then(function (token) {
                            var informacion = {
                                response: token,
                                remoteip: ''
                            }
                            ReCaptcha.confirmar_token(informacion).then(function (response) {
                                if (response.data.score < 0.6) {
                                    toaster.pop('error', 'Eres un robot');
                                    $scope.mostrar_botones_o_progressbar('registrar_invitado', false);
                                }
                                else {

                                    Pedido.actualizar_costumer(JSON.parse(localStorage.getItem('pedido')).id, $scope.invitado)
                                        .then(function () {

                                            //Evento GA4 - Eliminar intervalo de mostrar errores
                                            $googleAnalyticsService.eliminarIntervaloErroresFormulario()

                                            $scope.variables_registro_usuario(null, 3);
                                            usuarioProvider.invitado = true;                                           

                                            //Evento GA4 - Restablecer bandera de revisión de las etqiuetas de errores del formulario
                                            $googleAnalyticsService.restablecerEtiquetasDeErrorFormulario();
                                        }).catch(function (response) {
                                            $scope.mostrar_botones_o_progressbar('registrar_invitado', false);

                                            switch (response.status) {
                                                case 400:
                                                    toaster.error("Error", response.data.message);
                                                    $state.go('inicio.login');
                                                    break;
                                                case 500:
                                                    toaster.error("Error", response.data.message);
                                                    break;
                                            }
                                        })

                                }
                            }).catch(function () {
                                $scope.mostrar_botones_o_progressbar('registrar_invitado', false);
                            });
                        }).catch(function () {
                            $scope.mostrar_botones_o_progressbar('registrar_invitado', false);
                        });
                }
                /**
                 * Registro como usuario del portal
                 * */

                $scope.registar_checkout = function () {
                    $scope.mostrar_botones_o_progressbar('registrate', true)

                    if (!$scope.existe_pedido())
                        $state.go('inicio');
                    gRecaptcha.execute({ action: 'registrar_usuario' })
                        .then(function (token) {
                            var informacion = {
                                response: token,
                                remoteip: ''
                            }
                            ReCaptcha.confirmar_token(informacion).then(function (response) {
                                if (response.data.score < 0.6)
                                    toaster.pop('error', 'Eres un robot');
                                else {

                                    $scope.progressbar_checkout = true;

                                    var options = {
                                        method: 'PUT'
                                    };

                                    $scope.user.username = $scope.registro_usuario.correo;
                                    $scope.user.password = $scope.registro_usuario.password;


                                    ///Evento GA4 - Botón seleccionado checkout
                                    $googleAnalyticsService.eventoBotonSeleccionado('select','registarme', 'registrate', 2);


                                    $auth.signup($scope.registro_usuario, options)
                                        .then(function () {

                                          
                                            var options_login = {
                                                headers: {
                                                    'Content-Type': 'application/x-www-form-urlencoded',
                                                    'Authorization': 'Basic d2ViOjRiNWU1N2Y2ZWIyZjQyYjkwMzliM2QxZTEzOTI5Mjk1ZjIzMTc0OWM1MTBjYmUzNDFjZDY4MDM2ZDlhZjk3ZTI='
                                                }
                                            };

                                            $auth.login("grant_type=password" + "&username=" + $scope.user.username + "&password=" + $scope.user.password, options_login)
                                                .then(function (response) {
                                                    localStorage.setItem('info_token', JSON.stringify(response.data.data));
                                                    $auth.setToken(response.data.data.access_token);
                                                    localStorage.setItem('id', response.data.data.id_shakeshack);
                                                    toaster.pop({
                                                        type: 'success',
                                                        title: '!Has iniciado sesión correctamente!',
                                                        body: '',
                                                        timeout: 3000
                                                    });
                                                    usuarioProvider.invitado = false;
                                                    //$scope.actualizar_informacion_usuario();

                                                    //Evento GA4 - Eliminar intervalo de mostrar errores
                                                    $googleAnalyticsService.eliminarIntervaloErroresFormulario()

                                                    $scope.variables_registro_usuario(null, 4);
                                                    $scope.mensaje_error_registrate = '';

                                                })
                                                .catch(function (response) {
                                                    $('#registrar').attr('disabled', false);
                                                    $scope.show_progress = false;

                                                    switch (response.status) {
                                                        case 400:
                                                            $scope.error = true;
                                                            break;
                                                        case 500:
                                                            toaster.error("Error", "Ocurrió algo inesperado");
                                                            break;
                                                    }
                                                });
                                        })
                                        .catch(function (response) {

                                            ///Evento GA4 - Errores formulario
                                            $googleAnalyticsService.eventoErroresFormulario(response.data.message, "000",'tu información', "registrate", 2);

                                            $scope.mostrar_botones_o_progressbar('registrate', false)
                                            $scope.mostrar_errores(response.data.message, 7, true);
                                        });
                                }
                            }).catch(function () {
                                $scope.mostrar_botones_o_progressbar('registrate', false)
                            });
                        }).catch(function () {
                            $scope.mostrar_botones_o_progressbar('registrate', false)
                        });

                }

                $scope.pagar = function () {
                    if (!$scope.existe_pedido())
                        $state.go('inicio');
                    if (Stripe.result.error) {
                        $scope.mostrar_errores(Stripe.result.error.message, 4);

                    } else {
                        if (Stripe.result.paymentIntent.status === 'succeeded') {
                    
                            $rootScope.pedido.id_payment_intent_success = Stripe.result.paymentIntent.id;
                            $rootScope.pedido.timezone = "UTC" + moment().format('Z');
                            $rootScope.pedido.guardar_tarjeta = $scope.check_nueva_tarjeta == 'off_session';

                            Pedido.procesar($rootScope.pedido).then(function () {
                                $state.go('inicio.exitoso', { id: $rootScope.pedido.id });
                                localStorage.removeItem('pedido');
                                $rootScope.actualizar_pedido();
                            }).catch(function (response) {
                                $scope.mostrar_errores(response.data.message, 5);
                            })
                        }
                    }
                }

                $scope.procesar_pedido = function () {
                    Stripe.validar_intent_procesado($rootScope.pedido.client_secret)
                        .then((result) => {
                            switch (result.paymentIntent.status) {
                                case 'succeeded':
                        
                                    $rootScope.pedido.timezone = "UTC" + moment().format('Z');
                                    $rootScope.pedido.guardar_tarjeta = $scope.check_nueva_tarjeta == 'off_session';

                                    Pedido.procesar($rootScope.pedido).then(function () {
                                        $state.go('inicio.exitoso', { id: $rootScope.pedido.id });
                                        localStorage.removeItem('pedido');
                                        $rootScope.actualizar_pedido();
                                    }).catch(function (response) {
                                        $scope.mostrar_errores(response.data.message, 5);
                                    });
                                    break;
                                default:
                                    $scope.pagar();
                                    break;
                            }
                        }).catch(function (response) {
                            $timeout(() => {
                                $scope.mostrar_errores(response.data.message, 5)
                            });
                        });
                }

                $scope.actualizar_informacion_cliente = function () {
                    $scope.mostrar_botones_o_progressbar("actualizar_datos_usuario", true);
                    gRecaptcha.execute({ action: 'actualizar_informacion_cliente' })
                        .then(function (token) {
                            var informacion = {
                                response: token,
                                remoteip: ''
                            }
                            ReCaptcha.confirmar_token(informacion).then(function (response) {
                                if (response.data.score < 0.6) {
                                    $scope.mostrar_botones_o_progressbar("actualizar_datos_usuario", false);
                                    toaster.pop('error', 'Eres un robot');
                                }
                                else {
                                    var cliente = JSON.parse(localStorage.getItem('pedido')).cliente;
                                    var request_actualizar = {
                                        correo: cliente.correo,
                                        telefono: $scope.confirmacion_informacion.telefono,
                                        fecha_nacimiento: $scope.confirmacion_informacion.fecha_nacimiento_confirmacion
                                    }


                                    Pedido.actualizar_informacion_cliente(request_actualizar)
                                        .then(function () {
                                            $scope.variables_registro_usuario(null, 5);

                                        }).catch(function (response) {

                                            $scope.mostrar_botones_o_progressbar("actualizar_datos_usuario", false);
                                            switch (response.status) {
                                                case 400:
                                                    $state.go('inicio.login');
                                                    break;
                                                case 500:
                                                    toaster.pop("error", response.data.message);
                                                    break;
                                            }
                                        });

                                }
                            }).catch(function () {
                                $scope.mostrar_botones_o_progressbar("actualizar_datos_usuario", false);
                            });
                        }).catch(function () {
                            $scope.mostrar_botones_o_progressbar("actualizar_datos_usuario", false);
                        })
                        .catch(function () {
                            $scope.mostrar_botones_o_progressbar("actualizar_datos_usuario", false);
                        });
                }

                $scope.init();
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            }]);;
angular.module("shakeshack")
    .factory('Utilerias', ['Pedido', function (Pedido) {

        var interfaz = {

            /***************************administración del pedido***********************/
            mensaje_modal_pedido: '',            
            modal_pedido_vencido: false,
            estatus_pedido: false,
            id_pedido: null,
            response_conservar: null,
            cancelar_pedido: function () {
                localStorage.removeItem('pedido');
                var x = document.getElementById("modal_pedido_error");
                x.style.display = "none";
            },
            cerrarModalPedidoPagado: function () {
                var x = document.getElementById("modal_pedido_pagado");
                x.style.display = "none";
            },

            validar_estatus_pedido: function (estadoAnterior, estadoActual) {
            },

            currentDiv: function (elem) {

            },
            isScrolledIntoView: function (elem) {

            },
            /***
             * Funciones para la administración del pedido
             * */
            validar_pedido_activo: function () {

            },

            eliminar_pedido: function () {

            },

            conservar_pedido: function (id_pedido) {

            },

            guardar_pedido: function (id_pedido) {

            }

            
            /***************************************************************************/
        }


        interfaz.guardar_pedido = function (id_pedido) {
            return Pedido.consultar(id_pedido).then(function (response) {
                localStorage.setItem('pedido', JSON.stringify(response.data));
               
            })
        }

        /***
         * Función para conservar el pedido del usuario cuando inicia sesión y sale de sesión
         * */
        interfaz.conservar_pedido = function (id_pedido) {             
            return Pedido.merge
                (
                    {
                        id_pedido_viejo: id_pedido,
                        timezone: "UTC" + moment().format('Z')
                    }
            ).then(function (response)
            {
                localStorage.removeItem('pedido');
                localStorage.setItem('pedido', JSON.stringify(response.data));
            }
            ).catch(function (response)
            {
                interfaz.response_conservar = response;
                //switch (response.status) {
                //    case 400:
                //        toaster.warning("Error", response.data.error_description);

                //        break;
                //    case 500:
                //        toaster.error("Error", response.data.error_description);

                //        break;
                //}
            })
        }

        interfaz.validar_pedido_activo = function () {
           return Pedido.verificar(0)
                .then(function (result) {
                    interfaz.id_pedido =  result.data
                })
                .catch(function (result) {
                    interfaz.id_pedido =  null;
                });
        }


        interfaz.eliminar_pedido = function () {

        }

        interfaz.isScrolledIntoView = function (elem) {
            var $elem = $(elem);
            var $window = $(window);

            var docViewTop = $window.scrollTop();
            var docViewBottom = docViewTop + $window.height();

            var elemTop = $elem.offset().top;
            var elemBottom = elemTop + $elem.height();

            return ((elemTop <= docViewBottom) && (elemBottom >= docViewTop));
        }


        interfaz.currentDiv = function (elem) {
            var $elem = $(elem);
            $(document).scroll(function () {
                $($elem).each(function (index) {
                    var i = $(this);
                    if (interfaz.isScrolledIntoView(i)) {
                        if (typeof document.querySelectorAll('.ssp-wrapper > div')[index] == "undefined")
                            return 0

                        var elRelTop = document.querySelectorAll('.ssp-wrapper > div')[index].getBoundingClientRect().top;
                        if (typeof elRelTop == "undefined")
                            return 0
                        else {
                            var optionId = i.attr('id');
                            if (elRelTop <= '110') {
                                //console.log(optionId);
                                $('#mySelect').val(optionId)
                            }
                            //console.log(document.querySelectorAll('.ssp-wrapper > div')[index].getBoundingClientRect().top);
                            return i;
                        }
                        
                    }
                })
            })
        }
  
        interfaz.validar_estatus_pedido = function (estadoAnterior, estadoActual) {

            if (localStorage.getItem('pedido') != null) {
                var pedido = JSON.parse(localStorage.getItem('pedido'));

                var estatus = pedido;
                Pedido.estatus(pedido.id).then(function (response) {
                    switch (response.data.descripcion) {
                        case 'NFD':
                        case 'VCD':
                        case 'ELM':
                            var x = document.getElementById("modal_pedido_error");
                            x.style.display = "block";
                            interfaz.mensaje_modal_pedido = 'Pedido no encontrado'
                            estatus = false;                                        
                        default:
                            estatus = true;
                    }


                }).catch(function () {
                    interfaz.estatus_pedido = false;
                });
            }
            else if (estadoAnterior == 'inicio.checkout' && estadoActual != 'inicio.exitoso') {
                var x = document.getElementById("modal_pedido_pagado");
                x.style.display = "block";
                interfaz.mensaje_modal_pedido = 'El pedido fue pagado correctamente, por favor revisa tu historial de pedidos';

            };
        }
        return interfaz;
        
    }]);
;
angular.module("shakeshack")
    .factory('Stripe', ['entorno', function ( entorno) {

        var interfaz = {

            /***************************administración stripe***********************/
            
            stripe: null,
            cards: null,
            elements: null,
            nueva_tarjeta: {
                payment_method_id: '',
                error:''
            },
            result: null,
            payment_intent: null,
            cargar_elementos_stripe: function () {

            }, 
            confirmar_pago_nueva_tarjeta: function (check_valor, client_secret) {

            },
            confirmar_pago_nueva_tarjeta_card: function (check_valor, client_secret) {
            },
            confirmar_pago_tarjeta_guardada: function (client_secret){

            },
            confirmar_pago_tarjeta_guardada_card: function (client_secret, id_payment_method ) {               
            },
            guardar_tarjeta: function () {

            },

            validar_intent_procesado: function (client_secret) {

            }


            /***************************************************************************/
        }

        interfaz.validar_intent_procesado = function (client_secret) {

            return interfaz.stripe
                .retrievePaymentIntent(
                    client_secret,
                )                
        }

        interfaz.confirmar_pago_nueva_tarjeta = function (check_valor, client_secret) {
            return interfaz.stripe.confirmCardPayment(
                client_secret,
                {
                    setup_future_usage: check_valor
                });           
        }

        interfaz.confirmar_pago_nueva_tarjeta_card = function (check_valor, client_secret) {
            return interfaz.stripe.confirmCardPayment(
                client_secret,
                {
                    payment_method: {
                        card: interfaz.cards
                    },
                    setup_future_usage: check_valor
                });
        }

        interfaz.confirmar_pago_tarjeta_guardada = function (client_secret) {
            return interfaz.stripe.confirmCardPayment(client_secret);
        };

        interfaz.confirmar_pago_tarjeta_guardada_card = function (client_secret, id_payment_method) {
            return interfaz.stripe.confirmCardPayment
                (
                    client_secret,
                    {
                        payment_method: id_payment_method
                    }
                );
        };


        interfaz.guardar_tarjeta = function () {

            return interfaz.stripe.createPaymentMethod({
                type: 'card',
                card: interfaz.cards
            });
            //.then(function (result) {
            //    if (typeof result.error !== 'undefined') {
            //        interfaz.nueva_tarjeta.error = result.error      
            //    }
            //    else {
            //        interfaz.nueva_tarjeta.payment_method_id = result.paymentMethod.id                  
            //    }
            //    // Handle result.error or result.paymentMethod
            //});
        }

        interfaz.cargar_elementos_stripe = function () {
            if (typeof Stripe != "undefined") {
                var style = {
                    base: {
                        color: "#32325d",
                    }
                };
             
                interfaz.stripe = Stripe(entorno.stripe);

                interfaz.elements = interfaz.stripe.elements();
                interfaz.cards = interfaz.elements.create("card", { style: style, postalCode: '94110' });
                interfaz.cards.mount("#card-element");


                interfaz.cards.on('change', ({ error: error }) => {
                    const displayError = document.getElementById('card-errors');
                    if (error) {
                        displayError.textContent = error.message;
                    } else {
                        displayError.textContent = '';
                    }
                });
            }
        }

        return interfaz;

    }]);;
angular.module("shakeshack")
    .factory('ReCaptcha', ['$http', function ($http) {
        return {

            confirmar_token: function (parametros) {
                var req = {
                    method: 'POST',
                    url:'/api/services/auth/1.0/valdar-recaptcha',               
                    data: parametros
                }

                var oPromise = $http(req).then(function (response) {
                    return response.data;
                });
                return oPromise;
            }
        }
    }]);;
